<?xml version="1.0"?>
<doc>
    <assembly>
        "vcinet2"
    </assembly>
    <members>
        <member name="M:Ixxat.Vci3.VciException.GetErrorMsg(System.Int32)">
            <summary>
  This method is called to format the specified error code into a human
  readable text string.
</summary>
            <param name="errorCode">VCI error code to format</param>
            <returns>
  If the method succeeds it returns a pointer to the error message string.
  If the method fails it returns 0.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciException.get_HResult">
            <summary>
  Gets the HRESULT, a coded numerical value that is assigned to the VCI 
  exception.
</summary>
            <returns>
  The HRESULT, a coded numerical value that is assigned to the VCI 
  exception.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciException.#ctor(System.Int32)">
            <summary>
  Constructor for VCI exception objects.
</summary>
            <param name="errorCode">VCI or Win32 error code</param>
        </member>
        <member name="M:Ixxat.Vci3.VciException.#ctor">
            <summary>
  Constructor for VCI exception objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.VciServer.CreateLuid">
            <summary>
  This method obtains a locally unique VCI object identifier. A VCI
  object identifier is unique only within a single session. The same
  identifier value can be used on different computers or on the same
  computer after it has been restarted.
</summary>
            <returns>
  The method returns a newly created locally unique VCI object
  identifier.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if creating the unique VCI object identifier failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciServer.GetDeviceManager">
            <summary>
  Gets the reference to a new VCI device manager instance.
  When no longer needed the VCI device manager object has to be disposed 
  using the IDisposable interface. 
</summary>
            <returns>
  A reference to the VCI device manager.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if getting the VCI device manager failed.
</exception>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDeviceManager deviceManager = VciServer.GetDeviceManager();
  // Use deviceManager here
  // ...
  // Dispose object to release native resources
  deviceManager.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.VciServer.GetDriverManager">
            <summary>
  Gets a reference to a new VCI driver manager instance.
  When no longer needed the VCI driver manager object has to be disposed 
  using the IDisposable interface. 
</summary>
            <returns>
  A reference to the VCI driver manager.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if getting the VCI driver manager failed.
</exception>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDriverManager driverManager = VciServer.GetDriverManager();
  // Use driverManager here
  // ...
  // Dispose object to release native resources
  driverManager.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.VciServer.get_Version">
            <summary>
  Gets the version of the VCI server.
</summary>
            <returns>
  The version of the VCI server.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if getting the version number failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciServer.#ctor">
            <summary>
  Constructor for VCI server objects.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.VciServer.Version">
            <summary>
  Gets the version of the VCI server.
</summary>
            <returns>
  The version of the VCI server.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if getting the version number failed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.VciServer">
            <summary>
  This class represents the entry point for working with the VCI. 
  Use <c>GetDriverManager</c> to get access to the installed VCI drivers.
  Use <c>GetDeviceManager</c> to get access to the installed VCI devices.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_LineStatus">
            <summary>
  Gets the current status of the LIN line.
</summary>
            <returns>
  The current status of the LIN line.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting LIN line status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_TimeStampCounterDivisor">
            <summary>
  Gets the divisor factor of the time stamp counter. 
  The time stamp counter provides the time stamp for LIN messages. 
  The frequency of the time stamp counter is calculated from the frequency 
  of the primary timer (<c>ClockFrequency</c>) divided by the value 
  specified here.
</summary>
            <returns>
  The divisor factor of the time stamp counter.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_ClockFrequency">
            <summary>
  Gets the frequency to the primary timer in Hz.
</summary>
            <returns>
  The frequency to the primary timer in Hz.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_SupportsBusLoadComputation">
            <summary>
  Gets a value indicating if the LIN socket supports bus load computation.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_SupportsErrorFrames">
            <summary>
  Gets a value indicating if the LIN socket supports error frame reception.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_SupportsAutorate">
            <summary>
  Gets a value indicating if the LIN socket supports automatic baudrate
  detection.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_SupportsMasterMode">
            <summary>
  Gets a value indicating if the LIN socket supports LIN master mode.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.get_Features">
            <summary>
  Gets a flag field indicating the features supported by the LIN 
  controller.
</summary>
            <returns>
  A flag field indicating the features supported by the LIN 
  controller.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.GetNativeSocket">
            <summary>
  This method gets a pointer to the native LIN socket object.
</summary>
            <returns>
  If the method succeeds it returns a pointer to the native LIN socket
  object, otherwise the method returns NULL.
</returns>
            <remarks>
  The caller must Release the pointer returned by this method if it is
  no longer needed.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.InitNew(ILinSocket*)">
            <summary>
  This method initializes a newly created socket object.
</summary>
            <param name="pSocket">
  Pointer to the native LIN socket object.
  This parameter must not be NULL.
</param>
            <returns>
  VCI_OK if succeeded, otherwise a VCI error code.
</returns>
            <exception cref="T:System.OutOfMemoryException">
  Memory allocation failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.Dispose">
            <summary>
  Destructor for LIN socket objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinSocket.#ctor(IBalObject*,System.Byte,System.Byte)">
            <summary>
  Constructor for LIN socket objects.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface. 
  This parameter must not be NULL.
</param>
            <param name="portNumber">
  Port number of the bus socket to open.
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creation of LIN socket failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Native IBalObject was a null pointer.
</exception>
            <exception cref="T:System.OutOfMemoryException">
  Memory allocation failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.RemFilterIds(Ixxat.Vci3.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
  This method removes the specified CAN message identifier or group
  of identifiers from the specified filter list. The method can only be
  called if the CAN controller is in 'init' mode.
</summary>
            <param name="select">
  Filter selection. This parameter can be either <c>CanFilter::Std</c>
  to select the 11-bit filter list, or <c>CanFilter::Ext</c> to
  select the 29-bit filter list.
</param>
            <param name="code">
  Message identifier (inclusive RTR) to remove from the filter list. 
</param>
            <param name="mask">
  Mask that specifies the relevant bits within <paramref name="code" />. 
  Relevant bits are specified by a 1 in the corresponding bit position,
  non relevant bits are 0. 
</param>
            <example>
  The following example demonstates how to compute the 
  <paramref name="code" /> and <paramref name="mask" /> values to remove 
  the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
  <code>
    code   = 0101 0001 1000 1
    mask   = 0111 1111 1100 1
    result = 0101 0001 10xx 1

    IDs removed by this method:
             0101 0001 1000 1 (0x518, RTR = 1)
             0101 0001 1001 1 (0x519, RTR = 1)
             0101 0001 1010 1 (0x51A, RTR = 1)
             0101 0001 1011 1 (0x51B, RTR = 1)
  </code></example>
            <exception cref="T:Ixxat.Vci3.VciException">
  Removing filter Ids failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.AddFilterIds(Ixxat.Vci3.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
  This method registers the specified CAN message identifier or group
  of identifiers at the specified filter list. IDs registered within the
  filter list are accepted for reception. The method can only be called 
  if the CAN controller is in 'init' mode.
</summary>
            <param name="select">
  Filter selection. This parameter can be either <c>CanFilter::Std</c>
  to select the 11-bit filter list, or <c>CanFilter::Ext</c> to
  select the 29-bit filter list.
</param>
            <param name="code">
  Message identifier (inclusive RTR) to add to the filter list.  
</param>
            <param name="mask">
  Mask that specifies the relevant bits within <paramref name="code" />. 
  Relevant bits are specified by a 1 in the corresponding bit position,
  non relevant bits are 0. 
</param>
            <example>
  The following example demonstates how to compute the 
  <paramref name="code" /> and <paramref name="mask" /> values to register 
  the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
  <code>
    code   = 0101 0001 1000 1
    mask   = 0111 1111 1100 1
    result = 0101 0001 10xx 1

    IDs registered by this method:
             0101 0001 1000 1 (0x518, RTR = 1)
             0101 0001 1001 1 (0x519, RTR = 1)
             0101 0001 1010 1 (0x51A, RTR = 1)
             0101 0001 1011 1 (0x51B, RTR = 1)
  </code></example>
            <exception cref="T:Ixxat.Vci3.VciException">
  Registering filter Ids failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.SetAccFilter(Ixxat.Vci3.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
  This method sets the global acceptance filter. The global acceptance
  filter enables the reception of CAN message identifiers specified by
  the bit patterns passed in <paramref name="code" /> and 
  <paramref name="mask" />. The message IDs enabled by this method are 
  always accepted, even if the specified IDs are not registered within 
  the filter list (see also <c>AddFilterIds</c>). The method can only be 
   called if the CAN controller is in 'init' mode.  
</summary>
            <param name="select">
  Filter selection. This parameter can be either <c>CanFilter::Std</c>
  to select the 11-bit acceptance filter, or <c>CanFilter::Ext</c> to
  select the 29-bit acceptance filter.
</param>
            <param name="code">
  Acceptance code inclusive RTR bit. 
</param>
            <param name="mask">
  Mask that specifies the relevant bits within <paramref name="code" />. 
  Relevant bits are specified by a 1 in the corresponding bit position,
  non relevant bits are 0. 
</param>
            <remarks>
  The acceptance filter is defined by the acceptance code and acceptance 
  mask. The bit pattern of CANIDs to be received are defined by the 
  acceptance code. The corresponding acceptance mask allow to define 
  certain bit positions to be don't care (bit x = 0). The values in 
  <paramref name="code" /> and <paramref name="mask" /> have the following 
  format:
  <code>
  select = CanFilter::Std
  
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
   bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
       |  0 |  0 |  0 |  0 |   |  0 |ID11|   |ID2|ID1|ID0|RTR|
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
  
  select = CanFilter::Ext
  
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
   bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
       |  0 |  0 |ID28|ID27|   |ID12|ID11|   |ID2|ID1|ID0|RTR|
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
  </code></remarks>
            <example>
  The following example demonstates how to compute the 
  <paramref name="code" /> and <paramref name="mask" /> values to enable 
  the standard IDs in the range from 0x100 to 0x103 whereas RTR is 0.
  <code>
   code   = 001 0001 1000 0
   mask   = 111 1111 1100 1
   result = 001 0001 10xx 0
  
   enabled IDs:
            001 0000 0000 0 (0x100, RTR = 0)
            001 0000 0001 0 (0x101, RTR = 0)
            001 0000 0010 0 (0x102, RTR = 0)
            001 0000 0011 0 (0x103, RTR = 0)
  </code></example>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting acceptance filter failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.StopLine">
            <summary>
  This method stops the CAN line an switch it into init mode. After
  stopping the CAN controller no further CAN messages are transmitted
  over the message channel. Other than <c>ResetLine</c>, this method does
  not abort a currently busy transmit message and does not clear the
  standard and extended mode ID filter.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Stopping CAN line failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.StartLine">
            <summary>
  This method starts the CAN line and switch it into running mode.
  After starting the CAN line, CAN messages can be transmitted over
  the message channel.  
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Starting CAN line failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed. 
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.ResetLine">
            <summary>
  This method reset the CAN line to it's initial state. The method
  aborts a currently busy transmit message and switch the CAN controller
  into init mode. The method additionally clears the standard and
  extended mode ID filter. 
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resetting CAN line failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed. 
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.InitLine(Ixxat.Vci3.Bal.Can.CanOperatingModes,Ixxat.Vci3.Bal.Can.CanBitrate)">
            <summary>
  This method initialize the CAN line in the specified operating mode
  and bit transfer rate. The method also performs a reset of the CAN
  controller hardware and disables the reception of CAN messages.  
</summary>
            <param name="operatingMode">
  Operating mode of the CAN controller 
</param>
            <param name="bitrate">
  Bit timing value according to Philips SJA1000 at 16MHz 
</param>
            <remarks>
  The <paramref name="operatingMode" /> parameter defines the operating mode 
  of the CAN controller. The operating mode can be a combination of the 
  following primary operating mode flags:
  
    <c>CanOperatingModes.Standard</c> - standard frame format (11 bit identifier)
    <c>CanOperatingModes.Extended</c> - extended frame format (29 bit identifier)
  
  Optionally, the following flags can be combined with the primary operating
  mode flags:
  
    <c>CanOperatingModes.ListOnly</c> - listen only mode
    <c>CanOperatingModes.ErrFrame</c> - accept error frames
    <c>CanOperatingModes.LowSpeed</c> - use low speed bus interface
  
  The bit transfer rate for the CAN controller is specified by the 
  <paramref name="bitrate" /> parameter. The timing value must be set 
  according to the values of the bit timing register 0 and 1 of an Philips 
  SJA1000 CAN controller at a frequency of 16 MHz. See the Philips SJA1000 
  datasheet for more information of how to compute the timing values for a 
  given bit rate.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  CAN line initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.DetectBaud(System.UInt16,Ixxat.Vci3.Bal.Can.CanBitrate[])">
            <summary>
  This method detects the actual bit rate of the CAN line to which the
  controller is connected.
</summary>
            <param name="timeout">
  Timeout in milliseconds to wait between two successive receive messages.
</param>
            <param name="bitrateTable">
  One-dimensional array of initialized CanBitrate objects
  which contains possible values for the bit timing register
  to be tested.
</param>
            <returns>
  If the method succeeds it returns the index of the detected CanBitrate
  entry within the specified array. If the method fails it returns -1.
</returns>
            <remarks>
  The method detects the actual bit rate beginning at the first entry
  within the specified array and switches to the next entry until the
  correct baud rate is detected or the table limit is reached. If the
  time between two successive receive messages exceed the value specified
  by the <paramref name="timeout" /> parameter, the method throws a 
  <c>VciTimeoutException</c>.
  The total execution time of the method can be determined by the
  following formula:
  TotalExecutionTime [ms] = <paramref name="timeout" /> * <paramref name="bitrateTable" />.Length
</remarks>
            <exception cref="T:Ixxat.Vci3.VciTimeoutException">
  Time between two successive receive messages exceed the value specified
  by the <paramref name="timeout" /> parameter.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.InitNew(ICanControl*)">
            <summary>
  This method initializes a newly created CAN control object.
</summary>
            <param name="pCanCtl">
  Pointer to the native CAN control object.
  This parameter must not be NULL.
</param>
            <returns>
  VCI_OK if succeeded, VCI_E_INVALIDARG otherwise.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.Dispose">
            <summary>
  Destructor for VCI CAN control objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanControl.#ctor(IBalObject*,System.Byte,System.Byte)">
            <summary>
  Constructor for VCI CAN control objects.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface. 
  This parameter must not be NULL.
</param>
            <param name="portNumber">
  Port number of the bus socket to open.
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creation of CAN control socket failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Native IBalObject was a null pointer.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.ToString">
            <summary>
  Returns a String that represents the current Object.
</summary>
            <returns>
  A String that represents the current Object.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.get_BusName">
            <summary>
  Gets the name of the bus.
</summary>
            <returns>
  If succeeded the name of the bus.
  If failed a null reference (Nothing in Visual Basic).
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.get_BusType">
            <summary>
  Gets the bus type of the BAL bus socket.
</summary>
            <returns>
  The bus type of the BAL bus socket.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.get_BusPort">
            <summary>
  Gets the port number of the BAL bus socket.
</summary>
            <returns>
  The port number of the BAL bus socket.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.get_BusTypeIndex">
            <summary>
  Gets the bus type related port number
</summary>
            <returns>
  The bus type related port number
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.Dispose">
            <summary>
  Destructor for BAL socket objects.
</summary>
            <remarks>
  Do not remove this empty destructor.
  It forces providing the IDisposable interface for conformance with
  all other VCI interfaces !
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.#ctor(System.Byte,Ixxat.Vci3.VciBusType,System.Byte)">
            <summary>
  Constructor for BAL resource objects.
</summary>
            <param name="portNumber">
  Port number of the BAL resource.
</param>
            <param name="fieldBusType">
  Type of the field bus (see <c>VciBusType</c> enumeration)
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceManager.GetDeviceList">
            <summary>
  Gets the list of VCI device objects represeted by the 
  <c>IVciDeviceList</c> interface.
</summary>
            <returns>
  The list of VCI device objects represeted by the <c>IVciDeviceList</c>
  interface.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if creation of the device list failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceManager.Dispose">
            <summary>
  Destructor for VCI device manager objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceManager.#ctor">
            <summary>
  Constructor for VCI device manager objects.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.VciDeviceManager">
            <summary>
  The VCI device manager object manages the list of VCI device objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.IVciDeviceManager.GetDeviceList">
            <summary>
  Gets the list of VCI device objects represeted by a
  <c>IVciDeviceList</c> interface.
</summary>
            <returns>
  The list of VCI device objects represeted by a <c>IVciDeviceList</c>
  interface.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if creation of the device list failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.IVciDeviceManager">
            <summary>
  The VCI device manager manages the list of VCI device objects.
  Use the static <c>VciServer</c> class to get a VCI device manager
  object.
  When no longer needed the VCI device manager object has to be disposed 
  using the IDisposable interface. 
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDeviceManager deviceManager = VciServer.GetDeviceManager();
  // Use deviceManager here
  // ...
  // Dispose object to release native resources
  deviceManager.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.VciDriver.get_DriverVersion">
            <summary>
  Gets the version of the VCI driver.
</summary>
            <returns>
  The version of the VCI driver.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriver.get_DriverClass">
            <summary>
  Gets the class id of the VCI driver object.
</summary>
            <returns>
  Unique VCI driver class id.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriver.get_VciObjectId">
            <summary>
  Gets the unique VCI object id of the driver.
</summary>
            <returns>
  Unique VCI object id of the driver.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriver.Dispose">
            <summary>
  Destructor for VCI driver objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.VciDriver.#ctor(_VCIDRIVERINFO*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
  Constructor for VCI driver objects.
</summary>
            <param name="rDrvInfo">
  Reference to an initialized native VCI driver info record.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.GetMessageReader">
            <summary>
  Gets a reference to the message reader of the monitor which provides
  access to the monitor's receive buffer.
  Messages received from the LIN line can be read from this object.
</summary>
            <returns>
  A reference to the message reader of the monitor.
  When no longer needed the message reader object has to be 
  disposed using the IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provides access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting the message reader failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.get_MonitorStatus">
            <summary>
  Gets the current status of the monitor.
</summary>
            <returns>
  The current status of the monitor.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting monitor status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.Deactivate">
            <summary>
  This method deactivates the monitor. After deactivating the monitor,
  no further messages are received from the LIN line.
</summary>
            <returns>
  true on success, otherwise false.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Monitor deactivation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.Activate">
            <summary>
  This method activates the monitor. After activating the monitor,
  messages can received through the message reader.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Monitor activation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
            <remarks>
  The LIN line must be started, otherwise no messages are received from 
  the LIN line (see also ILinControl::StartLine).
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.Initialize(System.UInt16,System.Boolean)">
            <summary>
  This method initializes the monitor. This method must be called
  prior to any other method of the interface.
</summary>
            <param name="receiveFifoSize">
  Size of the receive buffer (number of messages)
</param>
            <param name="exclusive">
  If this parameter is set to true the method tries
  to initialize the monitor for exclusive use. If set
  to false, the method initializes the monitor for
  shared access.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Monitor initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <remarks>
  The monitor is deactivated after this method returns an must be
  activeted by an Activate() method call.
  The method can be called more than once to reconfigure the size
  of the receive FIFOs.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.InitNew(System.Boolean)">
            <summary>
  This method initializes the monitor object.
</summary>
            <param name="fExclusive">
  If this parameter is set to true the method tries to
  create the monitor in exclusive mode, otherwise the
  method creates a shared monitor.
</param>
            <returns>
  true on success, otherwise false.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creation of native monitor failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Native ILinSocket was NULL.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.Dispose">
            <summary>
  Destructor for VCI LIN monitor objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitor.#ctor(IBalObject*,System.Byte,System.Byte)">
            <summary>
  Constructor for VCI LIN monitor objects.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface.
  This parameter must not be NULL.
</param>
            <param name="bPortNo">
  Port number of the bus socket to open.
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverEnumerator.Reset">
            <summary>
  This method sets the enumerator to its initial position, which is
  before the first element in the collection.
</summary>
            <remarks>
  No guarantee exists that each iteration through the list of VCI drivers
  enumerates the same set of VCI drivers or enumerates the VCI drivers in
  the same order.
</remarks>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverEnumerator.MoveNext">
            <summary>
  This method advances the enumerator to the next driver of the
  collection.
</summary>
            <returns>
  The method returns true if the enumerator was successfully advanced to
  the next driver. The method returns false if the enumerator has passed
  the end of the list.
</returns>
            <remarks>
  After an enumerator is created or after a call to Reset, an enumerator is
  positioned before the first element of the list, and the first call
  to MoveNext moves the enumerator over the first element of the list.
  After the end of the list is passed, subsequent calls to MoveNext
  return false until Reset is called.
  An enumerator remains valid as long as the list remains unchanged.
  If changes are made to the list, such as adding, modifying or
  deleting elements, the enumerator is irrecoverably invalidated and the
  next call to MoveNext or Reset throws an InvalidOperationException.
  
  No guarantee exists that each iteration through the list of VCI drivers
  enumerates the same set of VCI drivers or enumerates the VCI drivers in
  the same order.
</remarks>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverEnumerator.get_Current">
            <summary>
  Gets the current VCI driver in the list.
</summary>
            <returns>
  A Reference to the current VCI driver in the list.
</returns>
            <remarks>
  After an enumerator is created or after the <c>Reset</c> method is called, 
  the <c>MoveNext</c> method must be called to advance the enumerator to the 
  first element of the list before reading the value of the 
  <c>Current</c> property; otherwise, <c>Current</c> is undefined.

  <c>Current</c> also throws an exception if the last call to 
  <c>MoveNext</c> returned false, which indicates the end of the list.

  <c>Current</c> does not move the position of the enumerator, and 
  consecutive calls to <c>Current</c> return the same object until either 
  <c>MoveNext</c> or <c>Reset</c> is called.
</remarks>
            <exception cref="T:System.InvalidOperationException">
  The enumerator is positioned before the first element of the collection 
  or after the last element. 
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverEnumerator.Dispose">
            <summary>
  Destructor for VCI driver enumerators.
</summary>
            <remarks>
  The compiler generates a IDisposable.Dispose() of the destructor.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverEnumerator.#ctor(IVciEnumDriver*)">
            <summary>
  Constructor for new VCI driver enumerators.
</summary>
            <param name="pEnuDrv">
  Pointer to the native driver enumerator interface
</param>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverList.GetEnumerator">
            <summary>
  This method returns an enumerator that can iterate through the
  list of installed VCI drivers.
</summary>
            <returns>
  A reference to the IEnumerator interface which can be used to iterate 
  through the list of installed driver.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creating the enumerator failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverList.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the driver list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the driver 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverList.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the driver list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the driver 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverList.Dispose">
            <summary>
  Destructor for VCI driver list objects.
</summary>
            <remarks>
  The compiler generates a IDisposable.Dispose() of the destructor.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverList.#ctor(IVciDriverManager*)">
            <summary>
  Constructor for new VCI driver list objects.
</summary>
            <param name="pDriverManager">
  Pointer to the native driver manager interface
</param>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceEnumerator.Reset">
            <summary>
  This method sets the enumerator to its initial position, which is
  before the first element in the collection.
</summary>
            <remarks>
  No guarantee exists that each iteration through the list of VCI devices
  enumerates the same set of VCI devices or enumerates the VCI devices in
  the same order.
</remarks>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceEnumerator.MoveNext">
            <summary>
  This method advances the enumerator to the next device of the
  collection.
</summary>
            <returns>
  The method returns true if the enumerator was successfully advanced to
  the next device. The method returns false if the enumerator has passed
  the end of the list.
</returns>
            <remarks>
  After an enumerator is created or after a call to Reset, an enumerator is
  positioned before the first element of the list, and the first call
  to MoveNext moves the enumerator over the first element of the list.
  After the end of the list is passed, subsequent calls to MoveNext
  return false until Reset is called.
  An enumerator remains valid as long as the list remains unchanged.
  If changes are made to the list, such as adding, modifying or
  deleting elements, the enumerator is irrecoverably invalidated and the
  next call to MoveNext or Reset throws an InvalidOperationException.
  
  No guarantee exists that each iteration through the list of VCI devices
  enumerates the same set of VCI devices or enumerates the VCI devices in
  the same order.
</remarks>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceEnumerator.get_Current">
            <summary>
  Gets the current VCI device in the list.
</summary>
            <returns>
  A Reference to the current VCI device in the list.
</returns>
            <remarks>
  After an enumerator is created or after the <c>Reset</c> method is called, 
  the <c>MoveNext</c> method must be called to advance the enumerator to the 
  first element of the list before reading the value of the 
  <c>Current</c> property; otherwise, <c>Current</c> is undefined.

  <c>Current</c> also throws an exception if the last call to 
  <c>MoveNext</c> returned false, which indicates the end of the list.

  <c>Current</c> does not move the position of the enumerator, and 
  consecutive calls to <c>Current</c> return the same object until either 
  <c>MoveNext</c> or <c>Reset</c> is called.
</remarks>
            <exception cref="T:System.InvalidOperationException">
  The enumerator is positioned before the first element of the collection 
  or after the last element. 
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceEnumerator.Dispose">
            <summary>
  Destructor for VCI device enumerators.
</summary>
            <remarks>
  The compiler generates a IDisposable.Dispose() of the destructor.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceEnumerator.#ctor(IVciEnumDevice*)">
            <summary>
  Constructor for new VCI device enumerators.
</summary>
            <param name="pEnuDev">
  Pointer to the native device enumerator interface
</param>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceList.GetEnumerator">
            <summary>
  This method returns an enumerator that can iterate through the
  list of installed VCI devices.
</summary>
            <returns>
  A reference to the IEnumerator interface which can be used to iterate 
  through the list of installed device.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceList.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the device list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the device 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceList.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the device list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the device 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceList.Dispose">
            <summary>
  Destructor for VCI device list objects.
</summary>
            <remarks>
  The compiler generates a IDisposable.Dispose() of the destructor.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.VciDeviceList.#ctor(IVciDeviceManager*)">
            <summary>
  Constructor for new VCI device list objects.
</summary>
            <param name="pDeviceManager">
  Pointer to the native device manager interface
</param>
        </member>
        <member name="T:Ixxat.Vci3.VciDeviceEnumerator">
            <summary>
  This class is used to enumerate the a list of VCI device objects.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.VciDeviceList">
            <summary>
  This class represents the list of installed VCI devices.
  To observe changes within this list use the <c>AssignEvent</c> methods 
  to register an event. This event is set to the signaled state whenever 
  the contents of the device list changes.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.IVciDeviceList.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the device list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the device 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.IVciDeviceList.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the device list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the device 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.IVciDeviceList">
            <summary>
  This interface represents the list of installed VCI devices.
  When no longer needed the VCI device list object has to be disposed 
  using the IDisposable interface. 
  To observe changes within this list use the <c>AssignEvent</c> methods 
  to register an event. This event is set to the signaled state whenever 
  the contents of the device list changes.
  Use <c>GetEnumerator()</c> to enumerate the list of VCI device objects
  whereas each VCI device object can be accessed by it's <c>IVciDevice</c> 
  interface.
  The enumerator object returned by <c>GetEnumerator()</c> also has to be
  disposed using the IDisposable interface. 
  Excplicitly disposing the enumerator object can be omitted when using 
  the C# foreach statement. foreach implicitly disposes the enumerator.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDeviceManager deviceManager = VciServer.GetDeviceManager();
  IVciDeviceList devices = deviceManager.GetDeviceList();
  foreach(IVciDevice device in devices)
  {
    // Use device here
    // ...
    // Dispose object to release native resources
    device.Dispose();
  }
  devices.Dispose();
  deviceManager.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalObject.get_FirmwareVersion">
            <summary>
  Gets the firmware version.
</summary>
            <returns>
  The firmware version.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalObject.OpenSocket(System.Byte,System.Type)">
            <summary>
  This method opens the specified bus socket.
</summary>
            <param name="portNumber">
  Number of the bus socket to open. This parameter must be within the 
  range of 0 to <c>Resources.Count</c> - 1.
</param>
            <param name="socketType">
  Type of the bus socket to open. The supported socket types
  are depending on the <c>BusType</c> of the BAL resource specified by the 
  <c>portNumber</c> parameter.
  I.e. for a CAN bus socket the following <c>socketTypes</c> are supported:
    ICanSocket, 
    ICanControl, 
    ICanChannel, 
    ICanScheduler.
  It's possible have several socketType open at the same time (i.e.
  ICanControl and ICanChannel).
</param>
            <returns>
  If the method succeeds it returns the opened bus socket object as 
  <c>IBalResource</c> reference. This reference can be casted to
  the type specified by parameter <paramref name="socketType" />.
  If the method fails it returns a null reference (Nothing in
  VisualBasic).
  When no longer needed the returned socket object has to be disposed using 
  the IDisposable interface. 
</returns>
            <remarks>
  The type of the bus socket is implicitly specified by the
  <c>portNumber</c> parameter (see <c>IBalResource.BusType</c> property).

  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Opening socket failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified port number is out of range.
</exception>
            <exception cref="T:System.NotImplementedException">
  There's no implementation for the specified <paramref name="socketType" />.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalObject.get_Resources">
            <summary>
  Gets a <c>BalResourceCollection</c> that can be used to iterate through
  the available BAL resources or to directly access such one via a
  collection index.
</summary>
            <returns>
  A reference to the collection of BAL resources.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalObject.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalObject.InitNew(IBalObject*)">
            <summary>
  This method initializes a newly created BAL object.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface.
  This parameter must not be NULL.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalObject.Dispose">
            <summary>
  Destructor for BAL objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalObject.#ctor(IVciDevice*)">
            <summary>
  Constructor for BAL objects.
</summary>
            <param name="pDevice">
  Pointer to the IVciDevice interface of the VCI device object.
  This parameter must not be NULL.
</param>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinMonitor">
            <summary>
  This class implements a LIN monitor.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMonitor.Deactivate">
            <summary>
  This method deactivates the LIN monitor. After deactivating the monitor,
  no further LIN messages are received from the LIN line.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Monitor deactivation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMonitor.Activate">
            <summary>
  This method activates the LIN monitor. After activating the channel,
  LIN messages can be received through the message reader.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Monitor activation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
            <remarks>
  The LIN line must be started, otherwise no messages are received or
  transmitted from/to the LIN line (see also ILinControl::StartLine).
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMonitor.Initialize(System.UInt16,System.Boolean)">
            <summary>
  This method initializes the LIN monitor. This method must be called
  prior to any other method of the interface.
</summary>
            <param name="receiveFifoSize">
  Size of the receive buffer (number of CAN messages)
</param>
            <param name="exclusive">
  If this parameter is set to true the method tries
  to initialize the monitor for exclusive use. If set
  to false, the method initializes the monitor for
  shared access.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Monitor initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <remarks>
  The monitor is deactivated after this method returns an must be
  activeted by an Activate() method call.
  The method can be called more than once to reconfigure the size
  of the receive or transmit FIFOs.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMonitor.GetMessageReader">
            <summary>
  Gets a reference to a new instance of a message reader object for the 
  monitor. This message reader provides access to the monitor's receive 
  buffer.
  LIN messages received from the LIN line can be read from this object.
</summary>
            <returns>
  A reference to the message reader of the monitor.
  When no longer needed the message reader object has to be 
  disposed using the IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provides access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting the message reader failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinMonitor.MonitorStatus">
            <summary>
  Gets the current status of the LIN monitor.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting channel status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.ILinMonitor">
            <summary>
  This interface represents a LIN communication monitor and is used to 
  receive LIN messages.
  When no longer needed the LIN communication monitor object has to be 
  disposed using the IDisposable interface. 
  A LIN communication monitor can be got via method 
  <c>IBalObject.OpenSocket()</c>. Unless the CAN socket is not already 
  in use exclusively, it's possible to open several concurrently 
  communication monitors on the same socket.
</summary>
            <remarks>
  The VCI interfaces provides access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open monitor on first LIN socket
  ILinMonitor monitor = bal.OpenSocket(0, typeof(ILinMonitor)) as ILinMonitor;
  
  // Initialize monitor non-exclusively
  monitor.Initialize(100, false);
  
  // Use monitor
  // ...
  
  // Dispose the objects
  monitor.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.op_Inequality(Ixxat.Vci3.Bal.Lin.LinMonitorStatus,Ixxat.Vci3.Bal.Lin.LinMonitorStatus)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.op_Equality(Ixxat.Vci3.Bal.Lin.LinMonitorStatus,Ixxat.Vci3.Bal.Lin.LinMonitorStatus)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.get_ReceiveFifoLoad">
            <summary>
  Gets the current load level of the receive FIFO in percent.
</summary>
            <returns>
  Current load level of the receive FIFO in percent (0...100%).
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.ReceiveFifoLoad">
            <summary>
  Gets the current load level of the receive FIFO in percent.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.get_HasFifoOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the receive FIFO.
</summary>
            <returns>
  true if a data overrun has occured, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.HasFifoOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the receive FIFO.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.get_IsActivated">
            <summary>
  Gets a value indicating whether the monitor is activated.
</summary>
            <returns>
  true if the monitor is activated, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMonitorStatus.IsActivated">
            <summary>
  Gets a value indicating whether the monitor is activated.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinMonitorStatus">
            <summary>
                <c>LinMonitorStatus</c> represents the status of a LIN monitor.
  See interface <c>ILinMonitor</c>.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.mngtLINMONITORSTATUS">
            <summary>
  Managed image of native struct LINMONITORSTATUS.
</summary>
            <remarks>
  We have to declare a managed version of native struct LINMONITORSTATUS to 
  prevent problems because of the following compiler error:
  error C4368: cannot define 'm_sMonStatus' as a member of managed 
               'Ixxat::Vci3::Bal::Lin::LinMonitorStatus': mixed types are 
               not supported
</remarks>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanControl">
            <summary>
  This class implements a CAN control socket.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.RemFilterIds(Ixxat.Vci3.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
  This method removes the specified CAN message identifier or group
  of identifiers from the specified filter list. The method can only be
  called if the CAN controller is in 'init' mode.
</summary>
            <param name="select">
  Filter selection. This parameter can be either <c>CanFilter::Std</c>
  to select the 11-bit filter list, or <c>CanFilter::Ext</c> to
  select the 29-bit filter list.
</param>
            <param name="code">
  Message identifier (inclusive RTR) to remove from the filter list. 
</param>
            <param name="mask">
  Mask that specifies the relevant bits within <paramref name="code" />. 
  Relevant bits are specified by a 1 in the corresponding bit position,
  non relevant bits are 0. 
</param>
            <example>
  The following example demonstates how to compute the 
  <paramref name="code" /> and <paramref name="mask" /> values to remove 
  the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
  <code>
    code   = 0101 0001 1000 1
    mask   = 0111 1111 1100 1
    result = 0101 0001 10xx 1

    IDs removed by this method:
             0101 0001 1000 1 (0x518, RTR = 1)
             0101 0001 1001 1 (0x519, RTR = 1)
             0101 0001 1010 1 (0x51A, RTR = 1)
             0101 0001 1011 1 (0x51B, RTR = 1)
  </code></example>
            <exception cref="T:Ixxat.Vci3.VciException">
  Removing filter Ids failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.AddFilterIds(Ixxat.Vci3.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
  This method registers the specified CAN message identifier or group
  of identifiers at the specified filter list. IDs registered within the
  filter list are accepted for reception. The method can only be called 
  if the CAN controller is in 'init' mode.
</summary>
            <param name="select">
  Filter selection. This parameter can be either <c>CanFilter::Std</c>
  to select the 11-bit filter list, or <c>CanFilter::Ext</c> to
  select the 29-bit filter list.
</param>
            <param name="code">
  Message identifier (inclusive RTR) to add to the filter list.  
</param>
            <param name="mask">
  Mask that specifies the relevant bits within <paramref name="code" />. 
  Relevant bits are specified by a 1 in the corresponding bit position,
  non relevant bits are 0. 
</param>
            <example>
  The following example demonstates how to compute the 
  <paramref name="code" /> and <paramref name="mask" /> values to register 
  the standard IDs in the range from 0x518 to 0x51B whereas RTR is 1.
  <code>
    code   = 0101 0001 1000 1
    mask   = 0111 1111 1100 1
    result = 0101 0001 10xx 1

    IDs registered by this method:
             0101 0001 1000 1 (0x518, RTR = 1)
             0101 0001 1001 1 (0x519, RTR = 1)
             0101 0001 1010 1 (0x51A, RTR = 1)
             0101 0001 1011 1 (0x51B, RTR = 1)
  </code></example>
            <exception cref="T:Ixxat.Vci3.VciException">
  Registering filter Ids failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.SetAccFilter(Ixxat.Vci3.Bal.Can.CanFilter,System.UInt32,System.UInt32)">
            <summary>
  This method sets the global acceptance filter. The global acceptance
  filter enables the reception of CAN message identifiers specified by
  the bit patterns passed in <paramref name="code" /> and 
  <paramref name="mask" />. The message IDs enabled by this method are 
  always accepted, even if the specified IDs are not registered within 
  the filter list (see also <c>AddFilterIds</c>). The method can only be 
   called if the CAN controller is in 'init' mode.  
</summary>
            <param name="select">
  Filter selection. This parameter can be either <c>CanFilter::Std</c>
  to select the 11-bit acceptance filter, or <c>CanFilter::Ext</c> to
  select the 29-bit acceptance filter.
</param>
            <param name="code">
  Acceptance code inclusive RTR bit. 
</param>
            <param name="mask">
  Mask that specifies the relevant bits within <paramref name="code" />. 
  Relevant bits are specified by a 1 in the corresponding bit position,
  non relevant bits are 0. 
</param>
            <remarks>
  The acceptance filter is defined by the acceptance code and acceptance 
  mask. The bit pattern of CANIDs to be received are defined by the 
  acceptance code. The corresponding acceptance mask allow to define 
  certain bit positions to be don't care (bit x = 0). 
</remarks>
            <example>
  The values in <paramref name="code" /> and <paramref name="mask" /> 
  have the following format:
  <code>
  select = CanFilter::Std
  
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
   bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
       |  0 |  0 |  0 |  0 |   |  0 |ID11|   |ID2|ID1|ID0|RTR|
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
  
  select = CanFilter::Ext
  
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
   bit | 31 | 30 | 29 | 28 |   | 13 | 12 |   | 3 | 2 | 1 | 0 |
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
       |  0 |  0 |ID28|ID27|   |ID12|ID11|   |ID2|ID1|ID0|RTR|
       +----+----+----+----+ ~ +----+----+ ~ +---+---+---+---+
  </code>  
  The following example demonstates how to compute the 
  <paramref name="code" /> and <paramref name="mask" /> values to enable 
  the standard IDs in the range from 0x100 to 0x103 whereas RTR is 0.
  <code>
   code   = 001 0001 1000 0
   mask   = 111 1111 1100 1
   result = 001 0001 10xx 0
  
   enabled IDs:
            001 0000 0000 0 (0x100, RTR = 0)
            001 0000 0001 0 (0x101, RTR = 0)
            001 0000 0010 0 (0x102, RTR = 0)
            001 0000 0011 0 (0x103, RTR = 0)
  </code></example>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting acceptance filter failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.StopLine">
            <summary>
  This method stops the CAN line an switch it into init mode. After
  stopping the CAN controller no further CAN messages are transmitted
  over the message channel. Other than <c>ResetLine</c>, this method does
  not abort a currently busy transmit message and does not clear the
  standard and extended mode ID filter.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Stopping CAN line failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.StartLine">
            <summary>
  This method starts the CAN line and switch it into running mode.
  After starting the CAN line, CAN messages can be transmitted over
  the message channel.  
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Starting CAN line failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed. 
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.ResetLine">
            <summary>
  This method reset the CAN line to it's initial state. The method
  aborts a currently busy transmit message and switch the CAN controller
  into init mode. The method additionally clears the standard and
  extended mode ID filter. 
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resetting CAN line failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed. 
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.InitLine(Ixxat.Vci3.Bal.Can.CanOperatingModes,Ixxat.Vci3.Bal.Can.CanBitrate)">
            <summary>
  This method initialize the CAN line in the specified operating mode
  and bit transfer rate. The method also performs a reset of the CAN
  controller hardware and disables the reception of CAN messages.  
</summary>
            <param name="operatingMode">
  Operating mode of the CAN controller 
</param>
            <param name="bitrate">
  Bit timing value according to Philips SJA1000 at 16MHz 
</param>
            <remarks>
  The <paramref name="operatingMode" /> parameter defines the operating mode 
  of the CAN controller. The operating mode can be a combination of the 
  following primary operating mode flags:
  <list type="bullet"><item><description><c>CanOperatingModes.Standard</c> - standard frame format (11 bit identifier)</description></item><item><description><c>CanOperatingModes.Extended</c> - extended frame format (29 bit identifier)</description></item></list>
  
  Optionally, the following flags can be combined with the primary operating
  mode flags:
  
  <list type="bullet"><item><description><c>CanOperatingModes.ListOnly</c> - listen only mode</description></item><item><description><c>CanOperatingModes.ErrFrame</c> - accept error frames</description></item><item><description><c>CanOperatingModes.LowSpeed</c> - use low speed bus interface</description></item></list>
  
  The bit transfer rate for the CAN controller is specified by the 
  <paramref name="bitrate" /> parameter. The timing value must be set 
  according to the values of the bit timing register 0 and 1 of an Philips 
  SJA1000 CAN controller at a frequency of 16 MHz. See the Philips SJA1000 
  datasheet for more information of how to compute the timing values for a 
  given bit rate.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  CAN line initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanControl.DetectBaud(System.UInt16,Ixxat.Vci3.Bal.Can.CanBitrate[])">
            <summary>
  This method detects the actual bit rate of the CAN line to which the
  controller is connected.
</summary>
            <param name="timeout">
  Timeout in milliseconds to wait between two successive receive messages.
</param>
            <param name="bitrateTable">
  One-dimensional array of initialized CanBitrate objects
  which contains possible values for the bit timing register
  to be tested.
</param>
            <returns>
  If the method succeeds it returns the index of the detected CanBitrate
  entry within the specified array. If the method fails it returns -1.
</returns>
            <remarks>
  The method detects the actual bit rate beginning at the first entry
  within the specified array and switches to the next entry until the
  correct baud rate is detected or the table limit is reached. If the
  time between two successive receive messages exceed the value specified
  by the <paramref name="timeout" /> parameter, the method throws a 
  <c>VciTimeoutException</c>.
  The total execution time of the method can be determined by the
  following formula:
  TotalExecutionTime [ms] = <paramref name="timeout" /> * <paramref name="bitrateTable" />.Length
</remarks>
            <exception cref="T:Ixxat.Vci3.VciTimeoutException">
  Time between two successive receive messages exceed the value specified
  by the <paramref name="timeout" /> parameter.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.ICanControl">
            <summary>
  This interface represents a CAN control unit and is used to control a
  CAN line. Controlling consists of initialisation, starting/stoping 
  the CAN line and adjusting filter settings.
  When no longer needed the CAN contol object has to be disposed using the 
  IDisposable interface. 
  A CAN control object can be got via method <c>IBalObject.OpenSocket()</c>. 
  The CAN control cannot be opened twice at the same time. Therefore a
  second try to open the CAN control via <c>IBalObject.OpenSocket()</c>
  fails until the successfully opened CAN control object is explicitly
  disposed.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open communication channel on first CAN socket
  ICanControl control = bal.OpenSocket(0, typeof(ICanControl)) as ICanControl;
  
  // Initialize CAN line
  control.InitLine(CanOperatingModes.Standard, CanBitrate.Cia250KBit);
  
  // Use CAN line
  // ...
  
  // Dispose control and BAL
  control.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.ReadMessages(Ixxat.Vci3.Bal.Can.CanMessage[])">
            <summary>
  This method reads multiple CAN messages from the front of the
  receive FIFO. The method removes the messages from the FIFO.
</summary>
            <param name="messages">
  One-dimensional array of CAN messages where the method stores the 
  received messages. The size of this array specifies the maximum
  number of message that can be read with the method call.
</param>
            <returns>
  The number of read messages if succeeded.
  0 if no message is available to read.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.ReadMessage(Ixxat.Vci3.Bal.Can.CanMessage@)">
            <summary>
  This method reads a single CAN message from the front of the
  receive FIFO and remove the message from the FIFO.
</summary>
            <param name="message">
  Reference to a CanMessage where the method stores the read the message.
</param>
            <returns>
  true on success. false if no message is available to read.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter fifoEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter fifoEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.set_Threshold(System.UInt16)">
            <summary>
  Sets the threshold for the trigger event. If the receive
  FIFO contains at least the specified number of CAN messages, the event
  specified by a AssignEvent method call is set to the signaled state.
</summary>
            <param name="threshold">
  Threshold for the event trigger.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting Threshold failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.get_Threshold">
            <summary>
  Gets the current threshold for the trigger event.
</summary>
            <returns>
  The number of currently unread CAN messages within the receive FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.get_FillCount">
            <summary>
  Gets the number of currently unread CAN messages within the receive FIFO.
</summary>
            <returns>
  The number of currently unread CAN messages within the receive FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.get_Capacity">
            <summary>
  Gets the capacity of the receive FIFO in number of CAN messages.
</summary>
            <returns>
  The capacity of the receive FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.Dispose">
            <summary>
  Destructor for CAN message reader objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageReader.#ctor(IFifoReader*)">
            <summary>
  Constructor for CAN message reader objects
</summary>
            <param name="pRxFifo">
  Pointer to the native receive FIFO object interface.
  This parameter must not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
  Native IFifoReader was a null pointer.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResourceCollection.CopyTo(Ixxat.Vci3.Bal.IBalResource[],System.Int32)">
            <summary>
  Copies the entire collection to a one-dimensional Array, starting at the 
  specified index of the target array.
</summary>
            <param name="array">
  The one-dimensional Array that is the destination of the elements copied 
  from the collection. The Array must have zero-based indexing. 
</param>
            <param name="index">
  The zero-based index in array at which copying begins.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResourceCollection.get_Item(System.Int32)">
            <summary>
  Get's the BAL resource identified by the specified collection index.
</summary>
            <param name="index">
  Index of the requested BAL resource within this collection of BAL 
  resources.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is not a valid index in the list.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResourceCollection.#ctor(Ixxat.Vci3.Bal.BalResource[])">
            <summary>
  Constructor for new BAL resource collection.
</summary>
            <param name="pResources">
  Reference to an array of supported BAL resource.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.SendMessages(Ixxat.Vci3.Bal.Can.CanMessage[])">
            <summary>
  This method places multiple CAN messages at the end of the
  transmit FIFO and returns without waiting for the messages to
  be transmitted.
</summary>
            <param name="messages">
  One-dimensional array of CAN messages to send.
</param>
            <returns>
  The number of entered messages.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.SendMessage(Ixxat.Vci3.Bal.Can.CanMessage)">
            <summary>
  This method places a single CAN message at the end of the
  transmit FIFO and returns without waiting for the message to
  be transmitted.
</summary>
            <param name="message">
  Reference to the CanMessage to send.
</param>
            <returns>
  If the method succeeds it returns true. The method returns false
  if there is not enought free space available within the transmit FIFO
  to add the message.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the message writer. The event
  is set to the signaled state if the number free entries within the 
  transmit FIFO reaches or exceed the currently set threshold.
</summary>
            <param name="fifoEvent">
  The event object which is set to the signaled state if the number free 
  entries within the transmit FIFO reaches or exceed the currently set 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter fifoEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the message writer. The event
  is set to the signaled state if the number free entries within the 
  transmit FIFO reaches or exceed the currently set threshold.
</summary>
            <param name="fifoEvent">
  The event object which is set to the signaled state if the number free 
  entries within the transmit FIFO reaches or exceed the currently set 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter fifoEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.set_Threshold(System.UInt16)">
            <summary>
  Sets the threshold for the trigger event. If the transmit
  FIFO contains at least the specified number of free entries, the event
  specified by a AssignEvent method call is set to the signaled state.
</summary>
            <param name="threshold">
  Threshold for the event trigger.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting Threshold failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.get_Threshold">
            <summary>
  Gets the current threshold for the trigger event.
</summary>
            <returns>
  The number of currently unread CAN messages within the receive FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.get_FreeCount">
            <summary>
  Gets the number of currently free CAN messages within the transmit FIFO.
</summary>
            <returns>
  The number of currently free CAN messages within the transmit FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.get_Capacity">
            <summary>
  Gets the capacity of the transmit FIFO in number of CAN messages.
</summary>
            <returns>
  The capacity of the transmit FIFO in number of CAN messages.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.Dispose">
            <summary>
  Destructor for CAN message reader objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessageWriter.#ctor(IFifoWriter*)">
            <summary>
  Constructor for CAN message writer objects
</summary>
            <param name="pTxFifo">
  Pointer to the native transmit FIFO object interface.
  This parameter must not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
  Native IFifoWriter was a null pointer.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.ReadMessages(Ixxat.Vci3.Bal.Lin.LinMessage[])">
            <summary>
  This method reads multiple messages from the front of the
  receive FIFO. The method removes the messages from the FIFO.
</summary>
            <param name="messages">
  One-dimensional array of messages where the method stores the 
  received messages. The size of this array specifies the maximum
  number of message that can be read with the method call.
</param>
            <returns>
  The number of read messages if succeeded.
  0 if no message is available to read.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.ReadMessage(Ixxat.Vci3.Bal.Lin.LinMessage@)">
            <summary>
  This method reads a single message from the front of the
  receive FIFO and remove the message from the FIFO.
</summary>
            <param name="message">
  Reference to a LinMessage where the method stores the read the message.
</param>
            <returns>
  true on success. false if no message is available to read.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter fifoEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter fifoEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.set_Threshold(System.UInt16)">
            <summary>
  Sets the threshold for the trigger event. If the receive
  FIFO contains at least the specified number of messages, the event
  specified by a AssignEvent method call is set to the signaled state.
</summary>
            <param name="threshold">
  Threshold for the event trigger.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting Threshold failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.get_Threshold">
            <summary>
  Gets the current threshold for the trigger event.
</summary>
            <returns>
  The number of currently unread messages within the receive FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.get_FillCount">
            <summary>
  Gets the number of currently unread messages within the receive FIFO.
</summary>
            <returns>
  The number of currently unread messages within the receive FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.get_Capacity">
            <summary>
  Gets the capacity of the receive FIFO in number of messages.
</summary>
            <returns>
  The capacity of the receive FIFO.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.Dispose">
            <summary>
  Destructor for message reader objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessageReader.#ctor(IFifoReader*)">
            <summary>
  Constructor for LIN message reader objects
</summary>
            <param name="pRxFifo">
  Pointer to the native receive FIFO object interface.
  This parameter must not be NULL.
</param>
            <exception cref="T:System.ArgumentNullException">
  Native IFifoReader was a null pointer.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinMessageReader">
            <summary>
  This class implements a LIN message reader.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMessageReader.ReadMessages(Ixxat.Vci3.Bal.Lin.LinMessage[])">
            <summary>
  This method reads multiple messages from the front of the
  receive FIFO. The method removes the messages from the FIFO.
</summary>
            <param name="messages">
  One-dimensional array of messages where the method stores the 
  received messages. The size of this array specifies the maximum
  number of message that can be read with the method call.
</param>
            <returns>
  The number of read messages if succeeded.
  0 if no message is available to read.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMessageReader.ReadMessage(Ixxat.Vci3.Bal.Lin.LinMessage@)">
            <summary>
  This method reads a single message from the front of the
  receive FIFO and remove the message from the FIFO.
</summary>
            <param name="message">
  Reference to a LinMessage where the method stores the read the message.
</param>
            <returns>
  true on success, false if no message is available to read.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMessageReader.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinMessageReader.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinMessageReader.Threshold">
            <summary>
  Gets or sets the threshold for the trigger event. If the receive
  FIFO contains at least the specified number of messages, the event
  specified by a <c>AssignEvent</c> method call is set to the signaled 
  state.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting Threshold failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinMessageReader.FillCount">
            <summary>
  Gets the number of currently unread messages within the receive FIFO.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinMessageReader.Capacity">
            <summary>
  Gets the capacity of the receive FIFO in number of messages.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.ILinMessageReader">
            <summary>
  This interface represents a LIN message reader. It's used to read 
  received LIN messages from a LIN monitor (see <c>ILinMonitor</c>).
  When no longer needed the LIN message reader object has to be disposed 
  using the IDisposable interface. 
  A LIN message reader object can be got via method 
  <c>ILinMonitor.GetMessageReader()</c>. 
</summary>
            <remarks>
  The VCI interfaces provides access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open monitor on first LIN socket
  ILinMonitor monitor = bal.OpenSocket(0, typeof(ILinMonitor)) as ILinMonitor;
  
  // Initialize channel non-exclusively
  monitor.Initialize(100, false);
  
  // Get the message reader
  ILinMessageReader reader = monitor.GetMessageReader();
  
  // Use message reader
  // ...
  
  // Dispose the objects
  reader.Dispose();
  monitor.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.ToString">
            <summary>
  Returns a String that represents the current Object.
</summary>
            <returns>
  A String that represents the current Object.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.OpenBusAccessLayer">
            <summary>
  This method is called to open the Bus Access Layer.
</summary>
            <returns>
  If succeeded a reference to the Bus Access Layer, otherwise a null 
  reference (Nothing in VisualBasic).
  When no longer needed the BAL object has to be disposed using the 
  IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_Equipment">
            <summary>
  Gets a description of the hardware equipment of the device.
</summary>
            <returns>
  The retrieved array contains a <c>VciCtrlInfo</c> for each 
  existing fieldbus controller.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_Manufacturer">
            <summary>
  Gets the device manufacturer string.
</summary>
            <returns>
  The device manufacturer string.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_Description">
            <summary>
  Gets the device description string.
</summary>
            <returns>
  The device description string.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_UniqueHardwareId">
            <summary>
  Gets the unique ID of the adapter. Each adapter has a unique ID that can 
  be used to distinguish between two PC-I04/PCI cards, for example. 
  Because this value can be either a GUID or a string with the serial 
  number the retrieved value is either a string reference or a boxed Guid 
  instance. 
</summary>
            <returns>
  Unique hardware id of the device.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_HardwareVersion">
            <summary>
  Gets the version of the VCI device hardware.
</summary>
            <returns>
  Version of the VCI device hardware.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_DriverVersion">
            <summary>
  Gets the version of the VCI device driver.
</summary>
            <returns>
  Version of the VCI device driver.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_DeviceClass">
            <summary>
  Gets the ID of the device class. Each device driver identifies its device 
  class in the form of a globally unique ID (GUID). Different adapters 
  belong to different device classes. Applications can use the device 
  class to distinguish between an IPC-I165/PCI and a PC-I04/PCI card, for 
  example.
</summary>
            <returns>
  Class id of the VCI device object.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.get_VciObjectId">
            <summary>
  Gets the unique VCI object id of the device.
</summary>
            <returns>
  Unique VCI object id of the device.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.OpenDevice">
            <summary>
  This method opens the VCI device object and retrieves a pointer
  to it's native IVciDevice interface.
</summary>
            <returns>
  A pointer to the native IVciDevice interface of the opened device.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.Dispose">
            <summary>
  Destructor for VCI device objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.VciDevice.#ctor(_VCIDEVICEINFO*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
            <summary>
  Constructor for VCI device objects.
</summary>
            <param name="rDevInfo">
  Reference to an initialized native VCI devcie info record.
</param>
        </member>
        <member name="T:Ixxat.Vci3.VciDevice">
            <summary>
  This class implements a VCI device object.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.IVciDevice.OpenBusAccessLayer">
            <summary>
  This method is called to open the Bus Access Layer.
</summary>
            <returns>
  If succeeded a reference to the Bus Access Layer, otherwise a null 
  reference (Nothing in VisualBasic).
  When no longer needed the BAL object has to be disposed using the 
  IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.Equipment">
            <summary>
  Gets a description of the hardware equipment of the device.
</summary>
            <returns>
  The retrieved array contains a <c>VciCtrlInfo</c> for each 
  existing fieldbus controller.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.Manufacturer">
            <summary>
  Gets the device manufacturer string.
</summary>
            <returns>
  The device manufacturer string.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.Description">
            <summary>
  Gets the device description string.
</summary>
            <returns>
  The device description string.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.UniqueHardwareId">
            <summary>
  Gets the unique ID of the adapter. Each adapter has a unique ID that can 
  be used to distinguish between two PC-I04/PCI cards, for example. 
  Because this value can be either a GUID or a string with the serial 
  number the retrieved value is either a string reference or a boxed Guid 
  instance. 
</summary>
            <returns>
  Unique hardware id of the device.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.HardwareVersion">
            <summary>
  Gets the version of the VCI device hardware.
</summary>
            <returns>
  Version of the VCI device hardware.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.DriverVersion">
            <summary>
  Gets the version of the VCI device driver.
</summary>
            <returns>
  Version of the VCI device driver.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.DeviceClass">
            <summary>
  Gets the ID of the device class. Each device driver identifies its device 
  class in the form of a globally unique ID (GUID). Different adapters 
  belong to different device classes. Applications can use the device 
  class to distinguish between an IPC-I165/PCI and a PC-I04/PCI card, for 
  example.
</summary>
            <returns>
  ID of the device class.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDevice.VciObjectId">
            <summary>
  Gets the unique VCI object id of the device.
</summary>
            <returns>
  Unique VCI object id of the device.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.IVciDevice">
            <summary>
  This interface represents a VCI device object.
  When no longer needed the VCI device object has to be disposed using 
  the IDisposable interface. 
  Get a VCI device object via the device list of <c>IVciDeviceManager</c>.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDeviceManager deviceManager = VciServer.GetDeviceManager();
  IVciDeviceList devices = deviceManager.GetDeviceList();
  foreach(IVciDevice device in devices)
  {
    // Use device here
    // ...
    // Dispose object to release native resources
    device.Dispose();
  }
  devices.Dispose();
  deviceManager.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.VciCtrlInfo.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciCtrlInfo.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciCtrlInfo.op_Inequality(Ixxat.Vci3.VciCtrlInfo,Ixxat.Vci3.VciCtrlInfo)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciCtrlInfo.op_Equality(Ixxat.Vci3.VciCtrlInfo,Ixxat.Vci3.VciCtrlInfo)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.VciCtrlInfo.Initialize(System.UInt16)">
            <summary>
  Initializes the controller info value object
</summary>
            <param name="wBusCtrlType">
  Value that encapsulates the bus and the controller type
  (see native macros VCI_BUS_TYPE and VCI_CTL_TYPE)
</param>
        </member>
        <member name="P:Ixxat.Vci3.VciCtrlInfo.ControllerType">
            <summary>
  Get's the type of the fieldbus controller. Because the actual data type 
  property depends in the bus type, the retrieved value is boxed into an
  object reference. The calling method has to cast it to the appropriate
  data type. For a CAN bus controller (<c>BusType</c> = 
  <c>VciBusType.Can</c>) the actual data type of property 
  <c>ControllerType</c> is <c>CanCtrlType</c>.
  This property can be a null reference if the <c>BusType</c> is 
  unknown.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.VciCtrlInfo.BusType">
            <summary>
  Get's the type of the supported fieldbus.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.VciCtrlInfo">
            <summary>
  This struct contains the bus type and controller type of a device's
  fieldbus controller. An array of such structs can be obtained from
  property <c>IVciDevice.Equipment</c>.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_LineStatus">
            <summary>
  Gets the current status of the CAN line.
</summary>
            <returns>
  The current status of the CAN line.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting CAN line status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_MaxDelayedTXTicks">
            <summary>
  Gets the maximum delay time of the delayed CAN message transmitter in 
  number of ticks.
</summary>
            <returns>
  Maximum cycle time of the CAN message scheduler in number of ticks.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_DelayedTXTimerDivisor">
            <summary>
  Gets the divisor factor for the timer used for delayed transmission of 
  messages. The frequency of this timer is calculated from the frequency 
  of the primary timer (<c>ClockFrequency</c>) divided by the value 
  specified here. If delayed transmission is not supported by the 
  adapter, property <c>DelayedTXTimerDivisor</c> has the value 0.
</summary>
            <returns>
  The divisor factor for the timer used for delayed transmission of 
  messages
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_MaxCyclicMessageTicks">
            <summary>
  Gets the maximum cycle time of the CAN message scheduler in number of 
  ticks.
</summary>
            <returns>
  Maximum cycle time of the CAN message scheduler in number of ticks.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_CyclicMessageTimerDivisor">
            <summary>
  Gets the divisor factor for the timer of the cyclic transmit list
  (See <c>ICanScheduler</c>. The frequency of this timer is calculated 
  from the frequency of the primary timer (<c>ClockFrequency</c>) divided 
  by the value specified here. If no cyclic transmit list is available, 
  property <c>CyclicMessageTimerDivisor</c> has the value 0.
</summary>
            <returns>
  The divisor factor for the timer of the cyclic transmit list
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_TimeStampCounterDivisor">
            <summary>
  Gets the divisor factor of the time stamp counter. 
  The time stamp counter provides the time stamp for CAN messages. 
  The frequency of the time stamp counter is calculated from the frequency 
  of the primary timer (<c>ClockFrequency</c>) divided by the value 
  specified here.
</summary>
            <returns>
  The divisor factor of the time stamp counter.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_ClockFrequency">
            <summary>
  Gets the frequency to the primary timer in Hz.
</summary>
            <returns>
  The frequency to the primary timer in Hz.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsDelayedTransmission">
            <summary>
  Gets a value indicating if the CAN socket supports delayed transmission 
  of CAN message frames.
</summary>
            <returns>
  True if the socket supports delayed transmission of CAN message frames. 
  Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsErrorFrameGeneration">
            <summary>
  Gets a value indicating if the CAN socket supports the generation of 
  error message frames.
</summary>
            <returns>
  true if the socket supports the generation of error message frames. 
  Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsCyclicMessageScheduler">
            <summary>
  Gets a value indicating if the CAN socket supports a cyclic message 
  scheduler.
</summary>
            <returns>
  true if the socket supports a cyclic message scheduler. Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsListenOnlyMode">
            <summary>
  Gets a value indicating if the CAN socket supports listen only mode.
</summary>
            <returns>
  true if the socket supports listen only mode. Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsExactMessageFilter">
            <summary>
  Gets a value indicating if the CAN socket supports exact filtering of 
  CAN messages.
</summary>
            <returns>
  true if the socket supports exact filtering of CAN messages. 
  Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsBusLoadComputation">
            <summary>
  Gets a value indicating if the CAN socket supports bus load computation.
</summary>
            <returns>
  true if the socket supports bus load computation. Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsErrorFrames">
            <summary>
  Gets a value indicating if the CAN socket supports error frames.
</summary>
            <returns>
  true if the socket supports error frames. Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsRemoteFrames">
            <summary>
  Gets a value indicating if the CAN socket supports remote transfer 
  requests.
</summary>
            <returns>
  true if the socket supports remote transfer requests. 
  Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsStdAndExtFrames">
            <summary>
  Gets a value indicating if the CAN socket supports standard (11-bit) 
  and extended (29-bit) message frames simultanously.
</summary>
            <returns>
  true if the socket supports standard (11-bit) and extended (29-bit) 
  message frames simultanously. Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_SupportsStdOrExtFrames">
            <summary>
  Gets a value indicating if the CAN socket supports only
  standard (11-bit) or extended (29-bit) message frames exclusively and
  not both frame formats at the same time.
</summary>
            <returns>
  true if the socket supports only standard (11-bit) or extended (29-bit) 
  message frames exclusively and not both frame formats at the same time. 
  Otherwise false.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_Features">
            <summary>
  Gets a flag field indicating the features supported by the CAN 
  controller.
</summary>
            <returns>
  A flag field indicating the features supported by the CAN 
  controller.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_BusCoupling">
            <summary>
  Gets the type of bus coupling used by the CAN controller.
</summary>
            <returns>
  Type of the bus coupling used by the CAN controller 
  (see <c>CanBusCouplings</c>).
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.get_ControllerType">
            <summary>
  Gets the type of controller used by the CAN socket.
</summary>
            <returns>
  The type of controller used by the CAN socket (see <c>CanCtrlType</c>).
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.GetNativeSocket">
            <summary>
  This method gets a pointer to the native CAN socket object.
</summary>
            <returns>
  If the method succeeds it returns a pointer to the native CAN socket
  object, otherwise the method returns NULL.
</returns>
            <remarks>
  The caller must Release the pointer returned by this method if it is
  no longer needed.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.InitNew(ICanSocket*)">
            <summary>
  This method initializes a newly created socket object.
</summary>
            <param name="pSocket">
  Pointer to the native CAN socket object.
  This parameter must not be NULL.
</param>
            <returns>
  VCI_OK if succeeded, otherwise a VCI error code.
</returns>
            <exception cref="T:System.OutOfMemoryException">
  Memory allocation failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.Dispose">
            <summary>
  Destructor for CAN socket objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanSocket.#ctor(IBalObject*,System.Byte,System.Byte)">
            <summary>
  Constructor for CAN socket objects.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface. 
  This parameter must not be NULL.
</param>
            <param name="portNumber">
  Port number of the bus socket to open.
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creation of CAN socket failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Native IBalObject was a null pointer.
</exception>
            <exception cref="T:System.OutOfMemoryException">
  Memory allocation failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.GetMessageWriter">
            <summary>
  Gets a reference to the message writer of the channel which provides
  access to the channel's transmit buffer.
  CAN messages written to this transmit buffer are transmitted over the 
  CAN line.
</summary>
            <returns>
  A reference to the message writer of the channel.
  When no longer needed the message writer object has to be 
  disposed using the IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting the message writer failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.GetMessageReader">
            <summary>
  Gets a reference to the message reader of the channel which provides
  access to the channel's receive buffer.
  CAN messages received from the CAN line can be read from this object.
</summary>
            <returns>
  A reference to the message reader of the channel.
  When no longer needed the message reader object has to be 
  disposed using the IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting the message reader failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.get_ChannelStatus">
            <summary>
  Gets the current status of the CAN channel.
</summary>
            <returns>
  The current status of the CAN channel.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting channel status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.Deactivate">
            <summary>
  This method deactivates the CAN channel. After deactivating the channel,
  no further CAN messages are transmitted or received to/from the CAN line.
</summary>
            <returns>
  true on success, otherwise false.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Channel deactivation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.Activate">
            <summary>
  This method activates the CAN channel. After activating the channel,
  CAN messages can be transmitted and received through the message writer
  and message reader.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Channel activation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
            <remarks>
  The CAN line must be started, otherwise no messages are received or
  transmitted from/to the CAN line (see also ICanControl::StartLine).
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.Initialize(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
  This method initializes the CAN channel. This method must be called
  prior to any other method of the interface.
</summary>
            <param name="receiveFifoSize">
  Size of the receive buffer (number of CAN messages)
</param>
            <param name="transmitFifoSize">
  Size of the transmit buffer (number  of CAN messages)
</param>
            <param name="exclusive">
  If this parameter is set to true the method tries
  to initialize the channel for exclusive use. If set
  to false, the method initializes the channel for
  shared access.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Channel initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <remarks>
  The channel is deactivated after this method returns an must be
  activeted by an Activate() method call.
  The method can be called more than once to reconfigure the size
  of the receive or transmit FIFOs.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.InitNew(System.Boolean)">
            <summary>
  This method initializes the channel object.
</summary>
            <param name="fExclusive">
  If this parameter is set to true the method tries to
  create the channel in exclusive mode, otherwise the
  method creates a shared CAN message channel.
</param>
            <returns>
  true on success, otherwise false.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creation of native CAN channel failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Native ICanSocket was NULL.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.Dispose">
            <summary>
  Destructor for VCI CAN channel objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannel.#ctor(IBalObject*,System.Byte,System.Byte)">
            <summary>
  Constructor for VCI CAN channel objects.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface.
  This parameter must not be NULL.
</param>
            <param name="bPortNo">
  Port number of the bus socket to open.
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanChannel">
            <summary>
  This class implements a CAN channel.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanChannel.Deactivate">
            <summary>
  This method deactivates the CAN channel. After deactivating the channel,
  no further CAN messages are transmitted or received to/from the CAN line.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Channel deactivation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanChannel.Activate">
            <summary>
  This method activates the CAN channel. After activating the channel,
  CAN messages can be transmitted and received through the message writer
  and message reader.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Channel activation failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
            <remarks>
  The CAN line must be started, otherwise no messages are received or
  transmitted from/to the CAN line (see also ICanControl::StartLine).
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanChannel.Initialize(System.UInt16,System.UInt16,System.Boolean)">
            <summary>
  This method initializes the CAN channel. This method must be called
  prior to any other method of the interface.
</summary>
            <param name="receiveFifoSize">
  Size of the receive buffer (number of CAN messages)
</param>
            <param name="transmitFifoSize">
  Size of the transmit buffer (number  of CAN messages)
</param>
            <param name="exclusive">
  If this parameter is set to true the method tries
  to initialize the channel for exclusive use. If set
  to false, the method initializes the channel for
  shared access.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Channel initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <remarks>
  The channel is deactivated after this method returns an must be
  activeted by an Activate() method call.
  The method can be called more than once to reconfigure the size
  of the receive or transmit FIFOs.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanChannel.GetMessageWriter">
            <summary>
  Gets a reference to a new instance of a message writer object for the 
  channel. THis message writer provides access to the channel's transmit 
  buffer.
  CAN messages written to this transmit buffer are transmitted over the 
  CAN line.
</summary>
            <returns>
  A reference to the message writer of the channel.
  When no longer needed the message writer object has to be 
  disposed using the IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting the message writer failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanChannel.GetMessageReader">
            <summary>
  Gets a reference to a new instance of a message reader object for the 
  channel. This message reader provides access to the channel's receive 
  buffer.
  CAN messages received from the CAN line can be read from this object.
</summary>
            <returns>
  A reference to the message reader of the channel.
  When no longer needed the message reader object has to be 
  disposed using the IDisposable interface. 
</returns>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting the message reader failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanChannel.ChannelStatus">
            <summary>
  Gets the current status of the CAN channel.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting channel status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not initialized, yet.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.ICanChannel">
            <summary>
  This interface represents a CAN communication channel and is used to 
  receive and transmit CAN messages.
  When no longer needed the CAN communication channel object has to be 
  disposed using the IDisposable interface. 
  A CAN communication channel can be got via method 
  <c>IBalObject.OpenSocket()</c>. Unless the CAN socket is not already 
  in use exclusively, it's possible to open several concurrently 
  communication channels on the same socket.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open communication channel on first CAN socket
  ICanChannel channel = bal.OpenSocket(0, typeof(ICanChannel)) as ICanChannel;
  
  // Initialize channel non-exclusively
  channel.Initialize(100, 100, false);
  
  // Use channel
  // ...
  
  // Dispose channel an BAL
  channel.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanMessageWriter">
            <summary>
  This class implements a CAN message reader.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageWriter.SendMessages(Ixxat.Vci3.Bal.Can.CanMessage[])">
            <summary>
  This method places multiple CAN messages at the end of the
  transmit FIFO and returns without waiting for the messages to
  be transmitted.
</summary>
            <param name="messages">
  One-dimensional array of CAN messages to send.
</param>
            <returns>
  The number of entered messages.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageWriter.SendMessage(Ixxat.Vci3.Bal.Can.CanMessage)">
            <summary>
  This method places a single CAN message at the end of the
  transmit FIFO and returns without waiting for the message to
  be transmitted.
</summary>
            <param name="message">
  The CanMessage to send.
</param>
            <returns>
  If the method succeeds it returns true. The method returns false
  if there is not enought free space available within the transmit FIFO
  to add the message.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageWriter.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the message writer. The event
  is set to the signaled state if the number free entries within the 
  transmit FIFO reaches or exceed the currently set threshold.
</summary>
            <param name="fifoEvent">
  The event object which is set to the signaled state if the number free 
  entries within the transmit FIFO reaches or exceed the currently set 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageWriter.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the message writer. The event
  is set to the signaled state if the number free entries within the 
  transmit FIFO reaches or exceed the currently set threshold.
</summary>
            <param name="fifoEvent">
  The event object which is set to the signaled state if the number free 
  entries within the transmit FIFO reaches or exceed the currently set 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanMessageWriter.Threshold">
            <summary>
  Gets or sets the threshold for the trigger event. If the transmit
  FIFO contains at least the specified number of free entries, the event
  specified by a <c>AssignEvent</c> method call is set to the signaled 
  state.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting Threshold failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanMessageWriter.FreeCount">
            <summary>
  Gets the number of currently free CAN messages within the transmit FIFO.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanMessageWriter.Capacity">
            <summary>
  Gets the capacity of the transmit FIFO in number of CAN messages.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.ICanMessageWriter">
            <summary>
  This interface represents a CAN message writer. It's used to write 
  CAN messages to a CAN communication channel for transmission.
  (see <c>ICanChannel</c>).
  When no longer needed the CAN message writer object has to be disposed 
  using the IDisposable interface. 
  A CAN message writer object can be got via method 
  <c>ICanChannel.GetMessageWriter()</c>. 
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open communication channel on first CAN socket
  ICanChannel channel = bal.OpenSocket(0, typeof(ICanChannel)) as ICanChannel;
  
  // Initialize channel non-exclusively
  channel.Initialize(100, 100, false);
  
  // Get the message writer
  ICanMessageWriter writer = channel.GetMessageWriter();
  
  // Use message reader
  // ...
  
  // Dispose the objects
  writer.Dispose();
  channel.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanMessageReader">
            <summary>
  This class implements a CAN message reader.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageReader.ReadMessages(Ixxat.Vci3.Bal.Can.CanMessage[])">
            <summary>
  This method reads multiple CAN messages from the front of the
  receive FIFO. The method removes the messages from the FIFO.
</summary>
            <param name="messages">
  One-dimensional array of CAN messages where the method stores the 
  received messages. The size of this array specifies the maximum
  number of message that can be read with the method call.
</param>
            <returns>
  The number of read messages if succeeded.
  0 if no message is available to read.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageReader.ReadMessage(Ixxat.Vci3.Bal.Can.CanMessage@)">
            <summary>
  This method reads a single CAN message from the front of the
  receive FIFO and remove the message from the FIFO.
</summary>
            <param name="message">
  Reference to a CanMessage where the method stores the read the message.
</param>
            <returns>
  true on success, false if no message is available to read.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageReader.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanMessageReader.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the message reader. The event
  is set to the signaled state if the number of available messages within
  the receive FIFO exceed the currently set receive threshold.
</summary>
            <param name="fifoEvent">
  The event object which is to be set if the number of available 
  messages within the receive FIFO exceed the currently set receive 
  threshold.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanMessageReader.Threshold">
            <summary>
  Gets or sets the threshold for the trigger event. If the receive
  FIFO contains at least the specified number of CAN messages, the event
  specified by a <c>AssignEvent</c> method call is set to the signaled 
  state.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Setting Threshold failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanMessageReader.FillCount">
            <summary>
  Gets the number of currently unread CAN messages within the receive FIFO.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanMessageReader.Capacity">
            <summary>
  Gets the capacity of the receive FIFO in number of CAN messages.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.ICanMessageReader">
            <summary>
  This interface represents a CAN message reader. It's used to read 
  received CAN messages from a CAN communication channel 
  (see <c>ICanChannel</c>).
  When no longer needed the CAN message reader object has to be disposed 
  using the IDisposable interface. 
  A CAN message reader object can be got via method 
  <c>ICanChannel.GetMessageReader()</c>. 
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open communication channel on first CAN socket
  ICanChannel channel = bal.OpenSocket(0, typeof(ICanChannel)) as ICanChannel;
  
  // Initialize channel non-exclusively
  channel.Initialize(100, 100, false);
  
  // Get the message reader
  ICanMessageReader reader = channel.GetMessageReader();
  
  // Use message reader
  // ...
  
  // Dispose the objects
  reader.Dispose();
  channel.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.op_Inequality(Ixxat.Vci3.Bal.Can.CanChannelStatus,Ixxat.Vci3.Bal.Can.CanChannelStatus)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.op_Equality(Ixxat.Vci3.Bal.Can.CanChannelStatus,Ixxat.Vci3.Bal.Can.CanChannelStatus)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.get_TransmitFifoLoad">
            <summary>
  Gets the current load level of the transmit FIFO in percent.
</summary>
            <returns>
  Current load level of the transmit FIFO in percent (0...100%).
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanChannelStatus.TransmitFifoLoad">
            <summary>
  Gets the current load level of the transmit FIFO in percent.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.get_ReceiveFifoLoad">
            <summary>
  Gets the current load level of the receive FIFO in percent.
</summary>
            <returns>
  Current load level of the receive FIFO in percent (0...100%).
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanChannelStatus.ReceiveFifoLoad">
            <summary>
  Gets the current load level of the receive FIFO in percent.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.get_HasFifoOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the receive FIFO.
</summary>
            <returns>
  true if a data overrun has occured, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanChannelStatus.HasFifoOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the receive FIFO.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanChannelStatus.get_IsActivated">
            <summary>
  Gets a value indicating whether the channel is activated.
</summary>
            <returns>
  true if the channel is activated, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanChannelStatus.IsActivated">
            <summary>
  Gets a value indicating whether the channel is activated.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanChannelStatus">
            <summary>
                <c>CanChannelStatus</c> represents the status of a CAN channel.
  See interface <c>ICanChannel</c>.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.mngtCANCHANSTATUS">
            <summary>
  Managed image of native struct CANCHANSTATUS.
</summary>
            <remarks>
  We have to declare a managed version of native struct CANCHANSTATUS to 
  prevent problems because of the following compiler error:
  error C4368: cannot define 'm_sChanStatus' as a member of managed 
               'Ixxat::Vci3::Bal::Can::CanChannelStatus': mixed types are 
               not supported
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.StopMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg)">
            <summary>
  This method stops processing of this cyclic transmit message.
</summary>
            <param name="cyclicTXMessage">
  Reference to the cyclic transmit message to stop.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Stopping the cyclic transmit message failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.StartMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg,System.UInt16)">
            <summary>
  This method starts processing of the specified cyclic transmit message.
</summary>
            <param name="cyclicTXMessage">
  Reference to the cyclic transmit message to start.
</param>
            <param name="repeatCount">
  Number of repetitions the message should be sent. 
  If this parameter is set to 0, the message is sent
  endlessly.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Starting the cyclic transmit message failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <exception cref="T:System.ArgumentException">
  The specified trasmit object is a null reference or not registered
  at this scheduler.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.RemMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg)">
            <summary>
  This method removes the specified cyclic transmit message from
  the scheduler.
</summary>
            <param name="cyclicTXMessage">
  The cyclic transmit message to remove.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.AddMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg)">
            <summary>
  This method adds a new cyclic transmit message to the scheduler.
</summary>
            <param name="cyclicTXMessage">
  Reference to the initialized cyclic transmit message to add.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Adding the cyclic transmit message to the scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <exception cref="T:System.IndexOutOfRangeException">
  The transmit object cannot be registered at the scheduler because
  the maximum number of supported transmit object has already been reached.
</exception>
            <exception cref="T:System.ArgumentException">
  The specified transmit object is a null reference.
</exception>
            <exception cref="T:System.InvalidOperationException">
  The specified transmit object is already registered at a scheduler.
</exception>
            <remarks>
  The method only adds messages with <c>FrameType</c> set to 
  <c>CanMsgFrameType.Data</c>.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.UpdateStatus">
            <summary>
  This method updates the status of the scheduler and all currently
  registered messages.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.Reset">
            <summary>
  This method suspends execution of the scheduler and removes all
  currently registered messages.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resetting scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.ResetScheduler">
            <summary>
  This method suspends execution of the scheduler and removes all
  currently registered messages.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resetting scheduler failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.Suspend">
            <summary>
  This method suspends execution of the scheduler and stops processing
  of all currently registered messages.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Suspending scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.Resume">
            <summary>
  This method resumes execution of the scheduler and starts processing
  of all currently registered message.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resuming scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.InitNew(ICanScheduler*)">
            <summary>
  This method initialize a newly CAN scheduler object.
</summary>
            <param name="pCanShd">
  Pointer to the native CAN scheduler object.
  This parameter must not be NULL.
</param>
            <returns>
  VCI_OK is succeeded, otherwise a VCI error code.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.Dispose">
            <summary>
  Destructor for VCI CAN scheduler interface objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanScheduler.#ctor(IBalObject*,System.Byte,System.Byte)">
            <summary>
  Constructor for VCI CAN scheduler objects.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface. 
  This parameter must not be NULL.
</param>
            <param name="portNumber">
  Port number of the bus socket to open.
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creation of CAN socket failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Native IBalObject was a null pointer.
</exception>
            <exception cref="T:System.OutOfMemoryException">
  Memory allocation failed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_Data(System.Int32,System.Byte)">
            <summary>
  Sets a single data byte at the specified index within this
  cyclic CAN transmit message.
</summary>
            <param name="index">
  Index of the data byte to set.
</param>
            <param name="value">
  Value for the data byte.
</param>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified data index is out of range.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_Data(System.Int32)">
            <summary>
  Gets a single data byte at the specified index from this cyclic CAN 
  transmit message.
</summary>
            <param name="index">
  Index of the data byte to get.
</param>
            <returns>
  The data byte at the specified index.
</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified data index is out of range.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_ExtendedFrameFormat(System.Boolean)">
            <summary>
  Sets a value indicating whether this cyclic CAN transmit message
  is in extended frame format (29-bit id).
</summary>
            <param name="extended">
  true if the message has extended frame format otherwise false.
</param>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_ExtendedFrameFormat">
            <summary>
  Gets a value indicating whether this cyclic CAN transmit message
  is in extended frame format (29-bit id).
</summary>
            <returns>
  true if this cyclic CAN message has extended frame format, otherwise 
  the method returns false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_RemoteTransmissionRequest(System.Boolean)">
            <summary>
  Sets a value indicating whether this cyclic CAN transmit message
  should be send as remote transmission request.
</summary>
            <param name="remoteRequest">
  true if the message should be send as remote transmission request, 
  otherwise false.
</param>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_RemoteTransmissionRequest">
            <summary>
  Gets a value indicating whether this cyclic CAN message is sent
  as a remote transmission request (RTR) message.
</summary>
            <returns>
  true if this cyclic CAN message is send as a RTR message, 
  otherwise false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_SelfReceptionRequest(System.Boolean)">
            <summary>
  Sets a value indicating whether this cyclic CAN transmit message
  should be sent as self reception request.
</summary>
            <param name="selfReception">
  true if the message should be send as self reception request, 
  otherwise false.
</param>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_SelfReceptionRequest">
            <summary>
  Gets a value indicating whether the self reception request is enabled
  for this cyclic CAN transmit message.
</summary>
            <returns>
  true if the self reception request is enabled for this cyclic CAN 
  message, otherwise false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_DataLength(System.Byte)">
            <summary>
  Sets the data length of this cyclic CAN transmit message.
</summary>
            <param name="length">
  Data lenght of this cyclic CAN transmit message.
</param>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_DataLength">
            <summary>
  Gets the data length of this cyclic CAN transmit message.
</summary>
            <returns>
  The data length of this cyclic CAN transmit message.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_Identifier(System.UInt32)">
            <summary>
  Sets the CAN identifier of the cyclic CAN transmit message.
</summary>
            <param name="canId">
  CAN message identifier to set
</param>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_Identifier">
            <summary>
  Gets the CAN identifier of this cyclic CAN transmit message.
</summary>
            <returns>
  The CAN identifier of this cyclic CAN transmit message.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_AutoIncrementIndex(System.Byte)">
            <summary>
  Sets the index of the auto-incremented data field of this cyclic CAN
  transmit message.
</summary>
            <param name="index">
  Index of the data field to be auto-incremented (see also Remarks section 
  below).
</param>
            <remarks>
  If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc8</c> the 
  parameter <paramref name="index" /> specifies the byte within the data 
  field wich is auto-incremented after each transmission of the CAN message. 
  If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc16</c>
  the parameter <paramref name="index" /> specifies the least significant 
  byte within the data field which is auto-incremented after each 
  transmission of the CAN message. The most significant byte of the 
  auto-incremented data field is at <c>Data</c>[Index+1].
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified data index is out of range.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_AutoIncrementIndex">
            <summary>
  Gets the index of the auto-incremented data field of this cyclic CAN 
  transmit message.
</summary>
            <returns>
  The index of the auto-incremented data field of this cyclic CAN transmit 
  message.
</returns>
            <remarks>
  If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc8</c> 
  the result of this method specifies the byte within the data field wich 
  is auto-incremented after each transmission of the CAN message. If 
  <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc16</c> the 
  result specifies the least significant byte within the data field which 
  is auto-incremented after each transmission of the CAN message. The most 
  significant byte of the auto-incremented data field is at 
  <c>Data</c>[result+1]. It's not possible to read the actual value of the 
  auto-incremented data field. <c>Data</c>[result] will always return the 
  initial value of the data field when the message was added to the 
  scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_AutoIncrementMode(Ixxat.Vci3.Bal.Can.CanCyclicTXIncMode)">
            <summary>
  Sets the auto-increment mode of this cyclic CAN transmit message.
</summary>
            <param name="mode">
  Auto-increment mode. This parameter can be one of the following 
  constants:
    <c>CanCyclicTXIncMode.NoInc</c> - no auto-increment
    <c>CanCyclicTXIncMode.IncId</c> - auto-increment the CAN message identifier
    <c>CanCyclicTXIncMode.Inc8</c>  - auto-increment a 8-bit data field
    <c>CanCyclicTXIncMode.Inc16</c> - auto-increment a 16-bit data field
</param>
            <remarks>
  If <paramref name="mode" /> is set to either 
  <c>CanCyclicTXIncMode.Inc8</c> or <c>CanCyclicTXIncMode.Inc16</c>, 
  the <c>AutoIncrementIndex</c> property specifies the index of the first 
  byte within the CAN message to be auto-incremented.
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_AutoIncrementMode">
            <summary>
  Gets the auto-increment mode of this cyclic CAN transmit message.
</summary>
            <returns>
  The auto-increment mode of this cyclic CAN transmit message.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.set_CycleTicks(System.UInt16)">
            <summary>
  Sets the cycle time of this cyclic CAN transmit message in number of 
  clock ticks.
</summary>
            <param name="ticks">
  Cycle time in number of ticks. This parameter must be in the range 1 
  to <c>MaxCyclicMessageTicks</c>.
</param>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_CycleTicks">
            <summary>
  Gets the cycle time of this cyclic CAN transmit message in number of 
  clock ticks.
</summary>
            <returns>
  The cycle time of this cyclic CAN transmit message in number of 
  clock ticks.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.get_Status">
            <summary>
  Gets the current status of this cyclic CAN message.
</summary>
            <returns>
  The current status of this cyclic CAN transmit message.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Reset">
            <summary>
  This method removes the cyclic transmit message from the scheduler
  and resets the contents of this object.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Stop">
            <summary>
  This method stops processing of this cyclic transmit message.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not yet added to a scheduler.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Start(System.UInt16)">
            <summary>
  This method starts processing of this cyclic transmit message.
</summary>
            <param name="repeatCount">
  Number of repetitions the message should be sent.
  If this parameter is set to 0, the message is sent endlessly.
</param>
            <returns>
  true on success, otherwise false.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Starting the cyclic transmit message failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed or not yet added to a scheduler.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.SetStat(Ixxat.Vci3.Bal.Can.CanCyclicTXStatus)">
            <summary>
  This method sets the status of the CAN cyclic message object. 
</summary>
            <param name="status">
  New status value of the cyclic transmit message.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Cleanup">
            <summary>
  This method cleans up the cyclic CAN transmit message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Dispose">
            <summary>
  Destructor for cyclic CAN transmit message objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.#ctor">
            <summary>
  Constructor for cyclic CAN transmit message objects.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanScheduler">
            <summary>
  This class implements the CAN scheduler.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Data(System.Int32)">
            <summary>
  Gets or sets a single data byte at the specified index within this
  cyclic CAN transmit message.
</summary>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified data index is out of range.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.ExtendedFrameFormat">
            <summary>
  Gets or sets a value indicating whether this cyclic CAN transmit message
  is in extended frame format (29-bit id). The property is true if the 
  message has extended frame format, otherwise false.
</summary>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.RemoteTransmissionRequest">
            <summary>
  Gets or sets a value indicating whether this cyclic CAN transmit message
  should be send as remote transmission request. The property is true if 
  the message should be send as remote transmission request, otherwise 
  false.
</summary>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.SelfReceptionRequest">
            <summary>
  Gets or sets a value indicating whether this cyclic CAN transmit message
  should be sent as self reception request. The property is  true if the 
  message should be send as self reception request, otherwise false.
</summary>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.DataLength">
            <summary>
  Gets or sets the data length of this cyclic CAN transmit message.
</summary>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Identifier">
            <summary>
  Gets or sets the CAN identifier of the cyclic CAN transmit message.
</summary>
            <remarks>
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.AutoIncrementIndex">
            <summary>
  Gets or sets the index of the auto-incremented data field of this cyclic 
  CAN transmit message.
</summary>
            <remarks>
  If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc8</c> the 
  parameter <paramref name="index" /> specifies the byte within the data 
  field wich is auto-incremented after each transmission of the CAN message. 
  If <c>AutoIncrementMode</c> is set to <c>CanCyclicTXIncMode.Inc16</c>
  the parameter <paramref name="index" /> specifies the least significant 
  byte within the data field which is auto-incremented after each 
  transmission of the CAN message. The most significant byte of the 
  auto-incremented data field is at <c>Data</c>[Index+1].
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified data index is out of range.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.AutoIncrementMode">
            <summary>
  Gets or sets the auto-increment mode of this cyclic CAN transmit message.
  Auto-increment mode. This can be one of the following constants:
    <c>CanCyclicTXIncMode.NoInc</c> - no auto-increment
    <c>CanCyclicTXIncMode.IncId</c> - auto-increment the CAN message identifier
    <c>CanCyclicTXIncMode.Inc8</c>  - auto-increment a 8-bit data field
    <c>CanCyclicTXIncMode.Inc16</c> - auto-increment a 16-bit data field
</summary>
            <remarks>
  If <c>AutoIncrementMode</c> is set to either 
  <c>CanCyclicTXIncMode.Inc8</c> or <c>CanCyclicTXIncMode.Inc16</c>, 
  the <c>AutoIncrementIndex</c> property specifies the index of the first 
  byte within the CAN message to be auto-incremented.
  The contents of a cyclic CAN transmit message can be only changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.CycleTicks">
            <summary>
  Gets or Sets the cycle time of this cyclic CAN transmit message in :
  number of clock ticks (See <c>ICanSocket.ClockFrequency</c> and 
  <c>ICanSocket.CyclicMessageTimerDivisor</c>). Clock ticks have a valid 
  range of 1 to <c>ICanSocket.MaxCyclicMessageTicks</c>.
  The cycle time can be calculated in accordance with the following formula:
  <code>
    cycle time [s] = (CyclicMessageTimerDivisor / ClockFrequency) * CycleTime 
  </code></summary>
            <remarks>
  The contents of a cyclic CAN transmit message can only be changed
  as long as the message is not registered at the scheduler. A call
  of this method is silently ignored if the message is currently
  registered at the scheduler.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg.Status">
            <summary>
  Gets the current status of this cyclic CAN message.
</summary>
            <returns>
  The current status of this cyclic CAN transmit message.
</returns>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanCyclicTXMsg">
            <summary>
  This class represents a cyclic CAN transmit message. 
  An instance of CanCyclicTXMsg has to be added to a CAN scheduler
  (see <c>ICanScheduler</c>) before it's transmission can be started.
</summary>
            <example>
                <code>
  ICanScheduler scheduler = ...

  // Create and init cyclic transmit message
  // Create and init cyclic transmit message
  CanCyclicTXMsg txMsg = new CanCyclicTXMsg();
  txMsg.Identifier         = 0x100;
  txMsg.DataLength         = 1;
  txMsg[0]                 = 0xAF;
  txMsg.AutoIncrementMode  = CanCyclicTXIncMode.Inc8;
  txMsg.AutoIncrementIndex = 0;
  // cycle time [s] = (CyclicMessageTimerDivisor / ClockFrequency)
  txMsg.CycleTicks         = 1;
  
  // Add message to scheduler
  scheduler.AddMessage(txMsg);
  
  // Start endless transmission
  scheduler.StartMessage(txMsg, 0);
  // or alternatively
  // txMsg.Start(0);
  
  //...

  // Dispose scheduler
  scheduler.Dispose();
 </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.mngtCANCYCLICTXMSG">
            <summary>
  Managed image of native struct CANCYCLICTXMSG.
</summary>
            <remarks>
  We have to declare a managed version of native struct CANCYCLICTXMSG to 
  prevent problems because of the following compiler error:
  error C4368: cannot define 'm_sCtxMsg' as a member of managed 
               'Ixxat::Vci3::Bal::Can::CanCyclicTXMsg': mixed types are not 
               supported
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.StopMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg)">
            <summary>
  This method stops processing of this cyclic transmit message.
</summary>
            <param name="cyclicTXMessage">
  Reference to the cyclic transmit message to stop.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Stopping the cyclic transmit message failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.StartMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg,System.UInt16)">
            <summary>
  This method starts processing of the specified cyclic transmit message.
</summary>
            <param name="cyclicTXMessage">
  Reference to the cyclic transmit message to start.
</param>
            <param name="repeatCount">
  Number of repetitions the message should be sent. 
  If this parameter is set to 0, the message is sent
  endlessly.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Starting the cyclic transmit message failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <exception cref="T:System.ArgumentException">
  The specified trasmit object is a null reference or not registered
  at this scheduler.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.RemMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg)">
            <summary>
  This method removes the specified cyclic transmit message from
  the scheduler.
</summary>
            <param name="cyclicTXMessage">
  The cyclic transmit message to remove.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.AddMessage(Ixxat.Vci3.Bal.Can.CanCyclicTXMsg)">
            <summary>
  This method adds a new cyclic transmit message to the scheduler.
</summary>
            <param name="cyclicTXMessage">
  Reference to the initialized cyclic transmit message to add.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Adding the cyclic transmit message to the scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <exception cref="T:System.IndexOutOfRangeException">
  The transmit object cannot be registered at the scheduler because
  the maximum number of supported transmit object has already been reached.
</exception>
            <exception cref="T:System.ArgumentException">
  The specified transmit object is a null reference.
</exception>
            <exception cref="T:System.InvalidOperationException">
  The specified transmit object is already registered at a scheduler.
</exception>
            <remarks>
  The method only adds messages with <c>FrameType</c> set to 
  <c>CanMsgFrameType.Data</c>.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.UpdateStatus">
            <summary>
  This method updates the status of the scheduler and all currently
  registered messages.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.Reset">
            <summary>
  This method suspends execution of the scheduler and removes all
  currently registered messages.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resetting scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.Resume">
            <summary>
  This method resumes execution of the scheduler and starts processing
  of all currently registered message.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resuming scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.ICanScheduler.Suspend">
            <summary>
  This method suspends execution of the scheduler and stops processing
  of all currently registered messages.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Suspending scheduler failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.ICanScheduler">
            <summary>
  This interface represents a CAN scheduler. A CAN scheduler provides the
  functionality to cyclically transmit CAN messages. Optionally such a 
  transmit message automatically be altered form one trasmission to the
  next (identifier or a piece of data).
  The CAN scheduler provides methods to establish, start and stop cyclic 
  transmit messages for a CAN line.
  When no longer needed the CAN scheduler object has to be disposed using 
  the IDisposable interface. 
  A CAN scheduler object can be got via method <c>IBalObject.OpenSocket()</c>. 
  The CAN scheduler cannot be opened twice at the same time. Therefore a
  second try to open the CAN scheduler via <c>IBalObject.OpenSocket()</c>
  fails until the successfully opened CAN scheduler object is explicitly
  disposed.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open scheduler on first CAN socket
  ICanScheduler scheduler = bal.OpenSocket(0, typeof(ICanScheduler)) as ICanScheduler;
  
  // Create and init cyclic transmit message
  CanCyclicTXMsg txMsg = new CanCyclicTXMsg();
  txMsg.Identifier         = 0x100;
  txMsg.DataLength         = 1;
  txMsg[0]                 = 0xAF;
  txMsg.AutoIncrementMode  = CanCyclicTXIncMode.Inc8;
  txMsg.AutoIncrementIndex = 0;
  // cycle time [s] = (CyclicMessageTimerDivisor / ClockFrequency)
  txMsg.CycleTicks         = 1;
  
  // Add message to scheduler
  scheduler.AddMessage(txMsg);
  
  // Start endless transmission
  scheduler.StartMessage(txMsg, 0);
  // or alternatively
  // txMsg.Start(0);
  
  //...

  // Dispose scheduler
  scheduler.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanCyclicTXStatus">
            <summary>
  Enumeration of values that indicate the status of a cyclic CAN 
  transmit message.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCyclicTXStatus.Done">
            <summary>
  Processing has completed
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCyclicTXStatus.Busy">
            <summary>
  Processing is in progress
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCyclicTXStatus.Empty">
            <summary>
  The message entry is empty
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanCyclicTXIncMode">
            <summary>
  Enumeration of modes for cyclic CAN transmit messages.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCyclicTXIncMode.Inc16">
            <summary>
  Increments a 16-bit value in the data field of the message. The least 
  significant byte of the 16-bit value to be incremented is defined in the 
  property <c>AutoIncrementIndex</c>. The most significant byte is in 
  Data[AutoIncrementIndex+1]. If the maximum value 65535 is exceeded, there 
  is an automatic overrun to 0.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCyclicTXIncMode.Inc8">
            <summary>
  Increments an 8-bit value in the data field of the message. The data field 
  to be incremented is defined in the proerty <c>AutoIncrementIndex</c>. If 
  the maximum value 255 is exceeded, there is an automatic overrun to 0.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCyclicTXIncMode.IncId">
            <summary>
  Increments the CAN ID of the message after every transmit process by 1. 
  If the CAN ID reaches the value 2048 (11-bit ID) or 536.870.912 (29-bit ID), 
  there is an automatic overrun to 0.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCyclicTXIncMode.NoInc">
            <summary>
  No automatic increment of a message field occurs.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.ToString">
            <summary>
  This method returns a String that represents the current object.
</summary>
            <returns>
  A String that represents the current object.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.op_Inequality(Ixxat.Vci3.Bal.Can.CanMessage,Ixxat.Vci3.Bal.Can.CanMessage)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.op_Equality(Ixxat.Vci3.Bal.Can.CanMessage,Ixxat.Vci3.Bal.Can.CanMessage)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.Clear">
            <summary>
  This method clears the contents of this CAN message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.#cctor">
            <summary>
  Static constructor for initialization of static members
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.Empty">
            <summary>
  Gets an empty CanMessage
</summary>
            <example>
                <code>
    CanMessage message = CanMessage.Empty;
    // Set DLC = 2
    message.DataLength = 2;
    // Initialize data field with 0xFF 0x08
    message[0] = 0xFF;
    message[1] = 0xFF;
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_Data(System.Int32,System.Byte)">
            <summary>
  Sets a single data byte at the specified index within this
  CAN message.
</summary>
            <param name="index">
  Index of the data byte to set
</param>
            <param name="value">
  Value for the data byte
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is out of range [0;<c>DataLength</c>].
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_Data(System.Int32)">
            <summary>
  Gets a single data byte at the specified index from this 
  CAN message.
</summary>
            <param name="index">
  Index of the data byte to get.
</param>
            <returns>
  The data byte at the specified index.
</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is out of range [0;<c>DataLength</c>].
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.Data(System.Int32)">
            <summary>
  Gets or sets a single data byte at the specified index from this
  CAN message. This property represents the indexer property. There is no
  real property with name "Data".
</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is out of range [0;<c>DataLength</c>].
</exception>
            <example>
                <code>
    CanMessage message = new CanMessage();
    // Set DLC = 2
    message.DataLength = 2;
    // Initialize data field with 0xFF 0x08
    message[0] = 0xFF;
    message[1] = 0xFF;
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_ExtendedFrameFormat(System.Boolean)">
            <summary>
  Sets a value indicating whether this message has extended frame
  format (29-bit id).
</summary>
            <param name="extended">
  true if the message has extended frame format, 
  otherwise false.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_ExtendedFrameFormat">
            <summary>
  Gets a value indicating whether this message has extended
  frame format (29-bit id).
</summary>
            <returns>
  true if this message has extended frame format, 
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.ExtendedFrameFormat">
            <summary>
  Gets or sets a value indicating whether this message has extended
  frame format (29-bit id).
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_RemoteTransmissionRequest(System.Boolean)">
            <summary>
  Sets a value indicating whether this message should be send as
  remote transmission request.
</summary>
            <param name="remoteRequest">
  true if the message should be send as remote transmission 
  request, otherwise false.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_RemoteTransmissionRequest">
            <summary>
  Gets a value indicating whether this message is a remote
  transmission request.
</summary>
            <returns>
  true if this message is a remote transmission request, 
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.RemoteTransmissionRequest">
            <summary>
  Gets or sets a value indicating whether this message is a remote
  transmission request.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_SelfReceptionRequest(System.Boolean)">
            <summary>
  Sets a value indicating whether this message should be send as
  self reception request.
</summary>
            <param name="selfReception">
  true if the message should be send as self reception
  request, otherwise false.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_SelfReceptionRequest">
            <summary>
  Gets a value indicating whether this message is the result of
  a self reception request.
</summary>
            <returns>
  true if this message is the result of a self reception request, 
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.SelfReceptionRequest">
            <summary>
  Gets or sets a value indicating whether this message is the result of
  a self reception request.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_PossibleOverrun">
            <summary>
  Gets a value indicating whether this message was the last
  message which could be placed in the receive FIFO, before
  this overflows.
</summary>
            <returns>
  A value indicating whether this message was the last
  message which could be placed in the receive FIFO, before
  this overflows.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.PossibleOverrun">
            <summary>
  Gets a value indicating whether this message was the last
  message which could be placed in the receive FIFO, before
  this overflows.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_DataLength(System.Byte)">
            <summary>
  Sets the data length of this CAN message.
</summary>
            <param name="length">
  The data length value of this CAN message to set.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The data length value to be set is out of range [0;8].
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_DataLength">
            <summary>
  Gets the data length of this CAN message.
</summary>
            <returns>
  The data length of this CAN message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.DataLength">
            <summary>
  Gets or sets the data length of this CAN message.
</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The data length value to be set is out of range [0;8].
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_AcceptReason">
            <summary>
  Gets a value indicating the filter that accepted the message.
</summary>
            <returns>
  A value indicating the filter that accepted the message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.AcceptReason">
            <summary>
  Gets a value indicating the filter that accepted the message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_FrameType(Ixxat.Vci3.Bal.Can.CanMsgFrameType)">
            <summary>
  Sets a value indicating the frame type of this CAN message.
</summary>
            <paramref name="frameType">
  The message frame type to set.
</paramref>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_FrameType">
            <summary>
  Gets a value indicating the frame type of this CAN message.
</summary>
            <returns>
  A value indicating the frame type of this CAN message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.FrameType">
            <summary>
  Gets a value indicating the frame type of this CAN message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_Identifier(System.UInt32)">
            <summary>
  Sets the CAN identifier of this CAN message.
</summary>
            <param name="canId">
  CAN identifier value to set.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_Identifier">
            <summary>
  Gets the CAN identifier of this CAN message.
</summary>
            <returns>
  The CAN identifier of this CAN message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.Identifier">
            <summary>
  Gets or sets the CAN identifier of this CAN message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.set_TimeStamp(System.UInt32)">
            <summary>
  Sets the time stamp of this CAN message.
</summary>
            <param name="timestamp">
  Time stamp value to set.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanMessage.get_TimeStamp">
            <summary>
  Gets the time stamp of this CAN message.
</summary>
            <returns>
  The time stamp of this CAN message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanMessage.TimeStamp">
            <summary>
  With receive messages, this field contains the relative reception time 
  of the message in ticks. The resolution of a tick can be calculated from 
  the properties <c>ICanSocket.ClockFrequency</c> and 
  <c>ICanSocket.TimeStampCounterDivisor</c> in accordance with the 
  following formula:
  <code>
    Resolution [s] = TimeStampCounterDivisor / ClockFrequency 
  </code>
  With transmit messages, the field defines with how many ticks delay the 
  message is to be transmitted to the bus. The delay time between the last 
  message transmitted and the new message can be calculated with the 
  properties <c>ICanSocket.ClockFrequency</c> and 
  <c>ICanSocket.DelayedTXTimerDivisor</c> in accordance with the following 
  formula:
  <code>
    delay time [s] = (DelayedTXTimerDivisor / ClockFrequency) * TimeStamp 
  </code>
  The maximum possible delay time is defined by the property 
  <c>ICanSocket.MaxDelayedTXTicks</c>.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanMessage">
            <summary>
  This value class represents a CAN message. CAN messages can be received
  and transmitted via the message reader (<c>ICanMessageReader</c>) and 
  the message writer (<c>ICanMessageWriter</c>) of a CAN channel 
  (<c>ICanChannel</c>). 
  The CAN data field can be accessed via the indexer property.
</summary>
            <example>
                <code>
    CanMessage message = new CanMessage();
    // Set DLC = 2
    message.DataLength = 2;
    // Initialize data field with 0xFF 0x08
    message[0] = 0xFF;
    message[1] = 0xFF;
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.mngtCANMSG">
            <summary>
  Managed image of native struct CANMSG.
</summary>
            <remarks>
  We have to declare a managed version of native struct CANMSG to prevent
  problems because of the following compiler error:
  error C4368: cannot define 'm_CanMsg' as a member of managed 
               'Ixxat::Vci3::Bal::Can::CanMessage': mixed types are not 
               supported
</remarks>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.mngtCANMSGINFO">
            <summary>
  Managed image of native struct CANMSGINFO.
</summary>
            <remarks>
  We have to declare a managed version of native struct CANMSGINFO to 
  prevent problems because of the following compiler error C4368.
  (see <c>mngtCANMSG</c>).
</remarks>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanMsgError">
            <summary>
  Enumeration of error information values supplied in first data field byte 
  of an eror frame <c>CanMessage</c> 
  (CanMessage.FrameType == CanMsgFrameType.Error).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgError.Other">
            <summary>
  Other (unspecified) error
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgError.Crc">
            <summary>
  CRC error
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgError.Bit">
            <summary>
  Bit error
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgError.Acknowledge">
            <summary>
  Acknowledgment error
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgError.Form">
            <summary>
  Form error
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgError.Stuff">
            <summary>
  Stuff error
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanMsgInfoValue">
            <summary>
  Enumeration of information values supplied in first data field byte of
  an info frame <c>CanMessage</c> 
  (CanMessage.FrameType == CanMsgFrameType.Info).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgInfoValue.Reset">
            <summary>
  Reset of CAN controller
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgInfoValue.Stop">
            <summary>
  Stop of CAN controller
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgInfoValue.Start">
            <summary>
  Start of CAN controller
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanMsgAccReason">
            <summary>
  Enumeration of values that are used to specify the filter that indicated 
  the acceptance of a CAN message (see <c>CanMessage</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgAccReason.Filter2">
            <summary>
  Message accepted by 2. filter
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgAccReason.Filter1">
            <summary>
  Message accepted by 1. filter
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgAccReason.Always">
            <summary>
  Message always accepted
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgAccReason.Reject">
            <summary>
  Message not accepted
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanMsgFrameType">
            <summary>
  Enumeration of values that are used to specify the frame type of a 
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgFrameType.TimeReset">
            <summary>
  Not currently used, or reserved for future extensions.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgFrameType.TimeOverrun">
            <summary>
  Timer overrun. 
  Messages of this type are generated when an overrun of the 32-bit 
  time stamp of CAN messages occurs. The time of the event (normally 0) 
  is given in the property <c>TimeStamp</c> of the message and the number 
  of timer overruns after the last timer overrun message in the <c>Identifier</c>. 
  The contents of the data fields are undefined.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgFrameType.Wakeup">
            <summary>
  Not currently used, or reserved for future extensions.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgFrameType.Status">
            <summary>
  Status message. 
  This message type is entered in the receive buffers of all activated 
  message channels when the controller status changes. The property
  <c>Identifier</c> of the message always has the value 0xFFFFFFFF. 
  The time of the event is marked in the property <c>TimeStamp</c> of 
  the message. The property Data[0] (indexer of the message) contains 
  flags defined by <c>CanCtrlStatus</c>. 
  The contents of the other data fields are undefined.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgFrameType.Error">
            <summary>
  Error message. 
  This message type is entered in the receive buffers of all activated message 
  channels when bus errors occur if the flag <c>CanOperatingModes.ErrFrame</c> 
  was specified in the parameter operatingMode when the method 
  <c>ICanControl.InitLine</c>  was called. The property <c>Identifier</c> of 
  the message always has the value 0xFFFFFFFF. The time of the event is marked 
  in the property <c>TimeStamp</c> of the message. The property Data[0] 
  (indexer of the message) contains one of the following values:
  <list type="table"><listheader><term>Constant</term><description>Meaning</description></listheader><item><term><c>CanMsgError.Stuff</c></term><description>Bit stuff error</description></item><item><term><c>CanMsgError.Form</c></term><description>Format error</description></item><item><term><c>CanMsgError.Acknowledge</c></term><description>Acknowledge error</description></item><item><term><c>CanMsgError.Bit</c></term><description>Bit error</description></item><item><term><c>CanMsgError.Crc</c></term><description>CRC error</description></item><item><term><c>CanMsgError.Other</c></term><description>Other unspecified error</description></item></list></summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgFrameType.Info">
            <summary>
  Information message. 
  This message type is entered in the receive buffers of all activated 
  message channels with certain events or with changes to the status of 
  the controller. The property <c>Identifier</c> of the message always has the 
  value 0xFFFFFFFF. The property Data[0] (Indexer of the message) contains 
  one of the following values:
  <list type="table"><listheader><term>Constant</term><description>Meaning</description></listheader><item><term><c>CanMsgInfoValue.Start</c></term><description>
         The CAN controller was started. The property <c>TimeStamp</c>  
         contains the relative start time (normally 0).
       </description></item><item><term><c>CanMsgInfoValue.Stop</c></term><description>
         The CAN controller was stopped. The property <c>TimeStamp</c> 
         contains the value 0. 
       </description></item><item><term><c>CanMsgInfoValue.Reset</c></term><description>
          The CAN controller was reset. The property <c>TimeStamp</c>
          contains the value 0.
       </description></item></list></summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanMsgFrameType.Data">
            <summary>
  Normal message. 
  All regular receive messages are of this type. The property <c>Identifier</c>
  contains the ID of the message, the field <c>TimeStamp</c> the time of 
  reception. The data field (accessible via the message's indexer) contain 
  according to length (see <c>DataLength</c>) the databytes of the message. 
  With transmit messages the IDs are to be entered in the property 
  <c>Identifier</c> and the databytes according to length in the property
  <c>DataLength</c>. The property <c>TimeStamp</c> is normally set to 0, 
  unless the message is to be transmitted with a delay. In this case the 
  delay time is to be specified in ticks.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanSocket">
            <summary>
  This class implements a CAN socket.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsDelayedTransmission">
            <summary>
  Gets a value indicating if the CAN socket supports delayed transmission 
  of CAN message frames.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsErrorFrameGeneration">
            <summary>
  Gets a value indicating if the CAN socket supports the generation of 
  error message frames.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsCyclicMessageScheduler">
            <summary>
  Gets a value indicating if the CAN socket supports a cyclic message 
  scheduler.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsListenOnlyMode">
            <summary>
  Gets a value indicating if the CAN socket supports listen only mode.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsExactMessageFilter">
            <summary>
  Gets a value indicating if the CAN socket supports exact filtering of 
  CAN messages.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsBusLoadComputation">
            <summary>
  Gets a value indicating if the CAN socket supports bus load computation.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsErrorFrames">
            <summary>
  Gets a value indicating if the CAN socket supports error frames.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsRemoteFrames">
            <summary>
  Gets a value indicating if the CAN socket supports remote transfer 
  requests.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsStdAndExtFrames">
            <summary>
  Gets a value indicating if the CAN socket supports standard (11-bit) 
  and extended (29-bit) message frames simultanously.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.SupportsStdOrExtFrames">
            <summary>
  Gets a value indicating if the CAN socket supports standard (11-bit) 
  and extended (29-bit) format exclusively.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.Features">
            <summary>
  Gets a flag field indicating the features supported by the CAN 
  controller.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.LineStatus">
            <summary>
  Gets the current status of the CAN line.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting CAN line status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.MaxDelayedTXTicks">
            <summary>
  Gets the maximum delay time of the delayed CAN message transmitter in 
  number of ticks.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.DelayedTXTimerDivisor">
            <summary>
  Gets the divisor factor for the timer used for delayed transmission of 
  messages. The frequency of this timer is calculated from the frequency 
  of the primary timer (<c>ClockFrequency</c>) divided by the value 
  specified here. If delayed transmission is not supported by the 
  adapter, property <c>DelayedTXTimerDivisor</c> has the value 0.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.MaxCyclicMessageTicks">
            <summary>
  Gets the maximum cycle time of the CAN message scheduler in number of 
  ticks.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.CyclicMessageTimerDivisor">
            <summary>
  Gets the divisor factor for the timer of the cyclic transmit list
  (See <c>ICanScheduler</c>. The frequency of this timer is calculated 
  from the frequency of the primary timer (<c>ClockFrequency</c>) divided 
  by the value specified here. If no cyclic transmit list is available, 
  property <c>CyclicMessageTimerDivisor</c> has the value 0.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.TimeStampCounterDivisor">
            <summary>
  Gets the divisor factor of the time stamp counter. 
  The time stamp counter provides the time stamp for CAN messages. 
  The frequency of the time stamp counter is calculated from the frequency 
  of the primary timer (<c>ClockFrequency</c>) divided by the value 
  specified here.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.ClockFrequency">
            <summary>
  Gets the frequency to the primary timer in Hz.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.BusCoupling">
            <summary>
  Gets the type of bus coupling used by the CAN controller.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.ICanSocket.ControllerType">
            <summary>
  Gets the type of controller used by the CAN socket.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.ICanSocket">
            <summary>
                <c>ICanSocket</c> provides the properties and capabilities of a
  CAN controller.
  When no longer needed the CAN contol object has to be disposed using the 
  IDisposable interface. 
  A CAN socket object can be got via method <c>IBalObject.OpenSocket()</c>.
  Additionally <c>ICanSocket</c> is the base interface for several other
  CAN bus specific socket interfaces like <c>ICanControl</c>,
  <c>ICanScheduler</c> and <c>ICanChannel</c>.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open first CAN socket
  ICanSocket socket = bal.OpenSocket(0, typeof(ICanSocket)) as ICanSocket;
  
  // Use socket
  // ...
  
  // Dispose socket an BAL
  socket.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanFeatures">
            <summary>
  Enumeration of flag values that are used to signalize the features 
  supported by a CAN controller (see <c>ICanSocket</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.DelayedTX">
            <summary>
  Delayed message transmitter
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.GenErrFrame">
            <summary>
  Error frame generation
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.Scheduler">
            <summary>
  Cyclic message scheduler
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.ListOnly">
            <summary>
  Cyclic message scheduler
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.IdFilter">
            <summary>
  Listen only mode
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.Busload">
            <summary>
  Bus load measurement in percent
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.ErrFrame">
            <summary>
  Reception of error frames
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.RemoteFrame">
            <summary>
  Reception of remote frames
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.StdAndExt">
            <summary>
  11 AND 29 bit (simultaneous)
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFeatures.StdOrExt">
            <summary>
  11 OR 29 bit (exclusive)
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanAccCode">
            <summary>
  Enumeration with predefined CAN acceptance filter code settings.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanAccMask">
            <summary>
  Enumeration with predefined CAN acceptance filter mask settings.
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.None">
            <summary>
  Acceptance mask to reject all CAN IDs
</summary>
            <summary>
  Acceptance code to reject all CAN IDs
</summary>
        </member>
        <member name="F:&lt;unknown type&gt;.All">
            <summary>
  Acceptance mask to accept all CAN IDs
</summary>
            <summary>
  Acceptance code to accept all CAN IDs
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanFilter">
            <summary>
  Enumeration of values that are used for filter selection to specify
  a CAN message filter. See interface <c>ICanControl</c>.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFilter.Ext">
            <summary>
  Select extended filter (29-bit)
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanFilter.Std">
            <summary>
  Select standard filter (11-bit)
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanCtrlType">
            <summary>
  Enumeration of values that are used to signalize the type of a CAN 
  controller (see <c>ICanSocket</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.BxCan">
            <summary>
  ST BX CAN
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.CCan">
            <summary>
  Bosch C Can
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.IFICan">
            <summary>
  IFI Can (Altera FPGA)
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.FreescaleFlexCan">
            <summary>
  Freescale Coldfire FLEXCAN
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.FreescaleMSCan">
            <summary>
  Freescale Star12 MSCAN
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.MotorolaToucan">
            <summary>
  Motorola TOUCAN
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.Infinion82C900">
            <summary>
  Infinion 82C900 (TwinCAN)
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.PhilipsSJA1000">
            <summary>
  Philips SJA 1000
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.Intel81C92">
            <summary>
  Intel 82C92
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.Intel81C90">
            <summary>
  Intel 82C90
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.Intel82C200">
            <summary>
  Intel 82C200
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.Intel82527">
            <summary>
  Intel 82527
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlType.Unknown">
            <summary>
  Unknown (possibly MC internal)
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanBusCouplings">
            <summary>
  Enumeration of flag values that are used to signalize the CAN bus 
  coupling (see <c>ICanSocket</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanBusCouplings.HighSpeed">
            <summary>
  High speed coupling
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanBusCouplings.LowSpeed">
            <summary>
  Low speed coupling
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanBusCouplings.Undefined">
            <summary>
  Undefined
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.op_Inequality(Ixxat.Vci3.Bal.Can.CanLineStatus,Ixxat.Vci3.Bal.Can.CanLineStatus)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.op_Equality(Ixxat.Vci3.Bal.Can.CanLineStatus,Ixxat.Vci3.Bal.Can.CanLineStatus)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_Busload">
            <summary>
  Gets the current bus load.
</summary>
            <returns>
  Current bus load (0...100%).
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.Busload">
            <summary>
  Gets the current bus load (0...100%).
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsInInitMode">
            <summary>
  Gets a value indicating whether the CAN controller is currently in init 
  mode.
</summary>
            <returns>
  true if the CAN controller is in init mode, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsInInitMode">
            <summary>
  Gets a value indicating whether the CAN controller is currently in init 
  mode.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsBusOff">
            <summary>
  Gets a value indicating whether the CAN controller is involved
  in bus activities.
</summary>
            <returns>
  true if the CAN controller is not involved in bus activities, 
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsBusOff">
            <summary>
  Gets a value indicating whether the CAN controller is involved
  in bus activities.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_HasErrorOverrun">
            <summary>
  Gets a value indicating if a error counter has reached or
  exceeded the predefined error warning limit.
</summary>
            <returns>
  true if an error counter has reached or exceeded the predefined error 
  warning limit, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.HasErrorOverrun">
            <summary>
  Gets a value indicating if a error counter has reached or
  exceeded the predefined error warning limit.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_HasDataOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the CAN controllers
  internal message buffer.
</summary>
            <returns>
  true if a data overrun has occured, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.HasDataOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the CAN controllers
  internal message buffer.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsTransmitPending">
            <summary>
  Gets a value indicating if the CAN controller is currently
  transmitting (sending) a CAN message.
</summary>
            <returns>
  true if the CAN controller is currently transmitting a CAN message, 
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsTransmitPending">
            <summary>
  Gets a value indicating if the CAN controller is currently
  transmitting (sending) a CAN message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_ControllerStatus">
            <summary>
  Gets the current CAN controller status.
</summary>
            <returns>
  Current CAN controller status.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.ControllerStatus">
            <summary>
  Gets the current CAN controller status.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_Bitrate">
            <summary>
  Gets the current bit timing value of the CAN controller.
</summary>
            <returns>
  Current CAN bit timing.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.Bitrate">
            <summary>
 Gets the current bit timing value of the CAN controller.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsLowSpeedEnabled">
            <summary>
  Gets a value indicating whether the CAN controller uses the
  low speed bus interface.
</summary>
            <returns>
  true if the CAN controller uses the low speed bus interface, 
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsLowSpeedEnabled">
            <summary>
 Gets a value indicating whether the CAN controller uses the
 low speed bus interface.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsListenOnly">
            <summary>
  Gets a value indicating whether the CAN controller is currently
  operating in listen only mode.
</summary>
            <returns>
  true if the CAN controller is currently operating in listen only mode, 
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsListenOnly">
            <summary>
 Gets a value indicating whether the CAN controller is currently
 operating in listen only mode.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsErrModeEnabled">
            <summary>
  Gets a value indicating if the reception of error frames is currently 
  enabled.
</summary>
            <returns>
  true if the reception of error frames is currently enabled,
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsErrModeEnabled">
            <summary>
  Gets a value indicating if the reception of error frames is currently 
  enabled.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsExtModeEnabled">
            <summary>
  Gets a value indicating whether the CAN controller is currently
  operating in extended (29-bit) frame mode.
</summary>
            <returns>
  true if the CAN controller is currently operating in extended frame 
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsExtModeEnabled">
            <summary>
  Gets a value indicating whether the CAN controller is currently
  operating in extended (29-bit) frame mode.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_IsStdModeEnabled">
            <summary>
  Gets a value indicating whether the CAN controller is currently
  operating in standard (11-bit) frame mode.
</summary>
            <returns>
  true if the CAN controller is currently operating in standard frame 
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.IsStdModeEnabled">
            <summary>
  Gets a value indicating whether the CAN controller is currently
  operating in standard (11-bit) frame mode.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanLineStatus.get_OperatingMode">
            <summary>
  Gets the current operating mode of the CAN controller.
</summary>
            <returns>
  The current operating mode of the CAN controller.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanLineStatus.OperatingMode">
            <summary>
  Gets the current operating mode of the CAN controller.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanLineStatus">
            <summary>
                <c>CanLineStatus</c> is used to signalize the status of a CAN 
  controller. See interface <c>ICanSocket</c>.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.mngtCANLINESTATUS">
            <summary>
  Managed image of native struct CANLINESTATUS.
</summary>
            <remarks>
  We have to declare a managed version of native struct CANLINESTATUS to 
  prevent problems because of the following compiler error:
  error C4368: cannot define 'm_sLineStatus' as a member of managed 
               'Ixxat::Vci3::Bal::Can::CanLineStatus': mixed types are not 
               supported
</remarks>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanCtrlStatus">
            <summary>
  Enumeration of flag values that are used to signalize the status mode of
  a CAN controller (see <c>CanLineStatus</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlStatus.InInit">
            <summary>
  Init mode active
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlStatus.BusOff">
            <summary>
  Bus off status
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlStatus.ErrLimit">
            <summary>
  Error warning limit exceeded
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlStatus.Overrun">
            <summary>
  Data overrun occurred
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanCtrlStatus.TXPending">
            <summary>
  Transmission pending
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanOperatingModes">
            <summary>
  Enumeration of flag values that are used to specify or signalize the 
  operating mode of a CAN controller (see <c>CanLineStatus</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanOperatingModes.LowSpeed">
            <summary>
  Use low speed bus interface
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanOperatingModes.ListOnly">
            <summary>
  Listen only mode (TX passive)
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanOperatingModes.ErrFrame">
            <summary>
  Enable reception of error frames
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanOperatingModes.Extended">
            <summary>
  Reception of 29-bit id messages
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanOperatingModes.Standard">
            <summary>
  Reception of 11-bit id messages
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Can.CanOperatingModes.Undefined">
            <summary>
  Undefined
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.op_Inequality(Ixxat.Vci3.Bal.Can.CanBitrate,Ixxat.Vci3.Bal.Can.CanBitrate)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.op_Equality(Ixxat.Vci3.Bal.Can.CanBitrate,Ixxat.Vci3.Bal.Can.CanBitrate)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.ToString">
            <summary>
  This method returns a String that represents the current timing value.
</summary>
            <returns>
  A String that represents the current bit timing value.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.#ctor(System.Byte,System.Byte,System.String)">
            <summary>
  Constructor for a new CanBitrate.
</summary>
            <param name="bitTimingRegister0">
  Value for bit timing register 0
</param>
            <param name="bitTimingRegister1">
  Value for bit timing register 1
</param>
            <param name="name">
  Human readable name of the bit rate.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.#ctor(System.Byte,System.Byte)">
            <summary>
  Constructor for a new CanBitrate.
</summary>
            <param name="bitTimingRegister0">
  Value for bit timing register 0
</param>
            <param name="bitTimingRegister1">
  Value for bit timing register 1
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_CiaBitRates">
            <summary>
  Gets an array of all available CiA baud rates.
</summary>
            <returns>
  Array of all available CiA baud rates.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.CiaBitRates">
            <summary>
  Gets an array of all available CiA baud rates.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get__100KBit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 100 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined 100 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate._100KBit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 100 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia1000KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 1000 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 1000 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia1000KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 1000 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia800KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 800 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 800 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia800KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 800 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia500KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 500 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 500 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia500KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 500 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia250KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 250 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 250 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia250KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 250 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia125KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 125 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 125 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia125KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 125 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia50KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 50 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 50 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia50KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 50 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia20KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 20 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 20 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia20KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 20 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Cia10KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 10 kbit/s.
</summary>
            <returns>
  Bit timing value for the predefined CiA 10 kbit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Cia10KBit">
            <summary>
  Gets the bit timing value for the predefined CiA bit rate of 10 kbit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Empty">
            <summary>
  Gets a empty bit timing value.
</summary>
            <returns>
  Empty bit timing value.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Empty">
            <summary>
  Gets a empty bit timing value.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Name">
            <summary>
  Gets the name of this bitrate.
</summary>
            <returns>
  The name of this bitrate.
</returns>
            <remarks>
  This property returns either the user defined name of the bit rate,
  if the bit rate was created with a name, or the name of the known
  bit rate. For custom bit rates without a user defined name, the
  property returns the bit timing value as numeric string.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Name">
            <summary>
  Gets the bit time of this CanBitrate.
</summary>
            <remarks>
  This property returns either the user defined name of the bit rate,
  if the bit rate was created with a name, or the name of the known
  bit rate. For custom bit rates without a user defined name, the
  property returns the bit timing value as numeric string.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Bittime">
            <summary>
  Gets the bit time of this CanBitrate.
</summary>
            <returns>
  Bit time of this CanBitrate in clock ticks according to SJA1000.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Bittime">
            <summary>
  Gets the bit time of this CanBitrate.
  (Bit time of this CanBitrate in clock ticks according to SJA1000.)
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_AsInt16">
            <summary>
  Gets the 16 bit value of this CanBitrate structure.
</summary>
            <returns>
  The 16 bit value of this CanBitrate structure.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.AsInt16">
            <summary>
  Gets the 16 bit value of this CanBitrate structure.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Btr1">
            <summary>
  Gets the value of the bit timing register 1.
</summary>
            <returns>
  Value for the bit timing register 1.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Btr1">
            <summary>
  Gets the value of the bus timing register 1. The value corresponds to 
  the BTR1 register of the Philips SJA 1000 CAN controller with a cycle 
  frequency of 16 MHz. Further information on this is given in the 
  datasheet of the SJA 1000.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Can.CanBitrate.get_Btr0">
            <summary>
  Gets the value of the bit timing register 0.
</summary>
            <returns>
  Value for the bit timing register 0.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Can.CanBitrate.Btr0">
            <summary>
  Gets the value of the bus timing register 0. The value corresponds to 
  the BTR0 register of the Philips SJA 1000 CAN controller with a cycle 
  frequency of 16 MHz. Further information on this is given in the 
  datasheet of the SJA 1000.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Can.CanBitrate">
            <summary>
  Instances of <c>CanBitrate</c> represent a bit rate for CAN busses.
  A CAN bit rate is defined of two bit timing register values: Btr0 and 
  Btr1.
  The standardized CiA bit timing register values are provided as static 
  <c>CanBitrate</c> members like <c>Cia250KBit</c>.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.WriteMessage(System.Boolean,Ixxat.Vci3.Bal.Lin.LinMessage)">
            <summary>
  This function either transmits the specified message directly to the LIN 
  bus connected to the controller or enters the message in the response 
  table of the controller.
</summary>
            <param name="send">
  true to force sending the message directly or false to enter the message
  into the controller's response table.
</param>
            <param name="message">
  The message to be transmitted.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Writing the message failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.StopLine">
            <summary>
  This method stops the LIN line an switches it into init mode. After
  stopping the LIN controller no further LIN messages are transmitted.
  Other than <c>ResetLine</c>, this method does not abort a currently 
  busy transmit message.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Stopping LIN line failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.StartLine">
            <summary>
  This method starts the LIN line and switch it into running mode.
  After starting the LIN line.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Starting LIN line failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed. 
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.ResetLine">
            <summary>
  This method resets the LIN line to it's initial state. The method
  aborts a currently busy transmit message and switches the LIN controller
  into init mode.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resetting LIN line failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.InitLine(Ixxat.Vci3.Bal.Lin.LinInitLine)">
            <summary>
  This method initializes the LIN line in the specified operating mode
  and bit transfer rate. The method also performs a reset of the LIN
  controller hardware.
</summary>
            <param name="initLine">
  Specifies the operating mode and bit transfer rate 
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  LIN line initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.Cleanup">
            <summary>
  This method performs tasks associated with freeing, releasing, or
  resetting unmanaged resources.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.InitNew(ILinControl*)">
            <summary>
  This method initializes a newly created LIN control object.
</summary>
            <param name="pLinCtl">
  Pointer to the native LIN control object.
  This parameter must not be NULL.
</param>
            <returns>
  VCI_OK if succeeded, VCI_E_INVALIDARG otherwise.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.Dispose">
            <summary>
  Destructor for VCI CAN control objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinControl.#ctor(IBalObject*,System.Byte,System.Byte)">
            <summary>
  Constructor for VCI LIN control objects.
</summary>
            <param name="pBalObj">
  Pointer to the native BAL object interface. 
  This parameter must not be NULL.
</param>
            <param name="portNumber">
  Port number of the bus socket to open.
</param>
            <param name="busTypeIndex">
  Bus type related port number
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Creation of LIN control socket failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Native IBalObject was a null pointer.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinControl">
            <summary>
  This class implements a LIN control socket.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinControl.WriteMessage(System.Boolean,Ixxat.Vci3.Bal.Lin.LinMessage)">
            <summary>
  This function either transmits the specified message directly to the LIN 
  bus connected to the controller or enters the message in the response 
  table of the controller.
</summary>
            <param name="send">
  true to force sending the message directly or false to enter the message
  into the controller's response table.
</param>
            <param name="message">
  The message to be transmitted.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Writing the message failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinControl.StopLine">
            <summary>
  This method stops the LIN line an switches it into init mode. After
  stopping the LIN controller no further LIN messages are transmitted.
  Other than <c>ResetLine</c>, this method does not abort a currently 
  busy transmit message.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Stopping LIN line failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.  
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinControl.StartLine">
            <summary>
  This method starts the LIN line and switch it into running mode.
  After starting the LIN line.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Starting LIN line failed.  
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed. 
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinControl.ResetLine">
            <summary>
  This method resets the LIN line to it's initial state. The method
  aborts a currently busy transmit message and switches the LIN controller
  into init mode.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Resetting LIN line failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.ILinControl.InitLine(Ixxat.Vci3.Bal.Lin.LinInitLine)">
            <summary>
  This method initializes the LIN line in the specified operating mode
  and bit transfer rate. The method also performs a reset of the LIN
  controller hardware.
</summary>
            <param name="initLine">
  Specifies the operating mode and bit transfer rate 
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  LIN line initialization failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.ILinControl">
            <summary>
  This interface represents a LIN control unit and is used to control a
  LIN line. Controlling consists of initialisation, starting/stoping 
  the LIN line and sending messages.
  When no longer needed the LIN contol object has to be disposed using the 
  IDisposable interface. 
  A LIN control object can be got via method <c>IBalObject.OpenSocket()</c>. 
  The LIN control cannot be opened twice at the same time. Therefore a
  second try to open the LIN control via <c>IBalObject.OpenSocket()</c>
  fails until the successfully opened LIN control object is explicitly
  disposed.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open communication channel on first LIN socket
  ILinControl control = bal.OpenSocket(0, typeof(ILinControl)) as ILinControl;
  
  // Initialize CAN line
  LinInitLine initData;
  initData.OperatingMode = LinOperatingModes.Slave;
  initData.Bitrate = LinBitrate.Lin1000Bit;
  control.InitLine(initData);
  
  // Use LIN line
  // ...
  
  // Dispose control and BAL
  control.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinInitLine">
            <summary>
  Struct that contains LIN bus initialization data that's used by 
  <c>ILinControl.InitLine</c></summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.op_Inequality(Ixxat.Vci3.Bal.Lin.LinBitrate,Ixxat.Vci3.Bal.Lin.LinBitrate)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.op_Equality(Ixxat.Vci3.Bal.Lin.LinBitrate,Ixxat.Vci3.Bal.Lin.LinBitrate)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.ToString">
            <summary>
  This method returns a String that represents the current timing value.
</summary>
            <returns>
  A String that represents the current bit timing value.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.#ctor(System.UInt16,System.String)">
            <summary>
  Constructor for a new LinBitrate.
</summary>
            <param name="bitrate">
  The bitrate in bit/sec
</param>
            <param name="name">
  Human readable name of the bit rate.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.#ctor(System.UInt16)">
            <summary>
  Constructor for a new LinBitrate.
</summary>
            <param name="bitrate">
  The bitrate in bit/sec
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin20000Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 20000 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 20000 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin20000Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 20000 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin19200Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 19200 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 19200 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin19200Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 19200 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin10400Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 10400 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 10400 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin10400Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 10400 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin9600Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 9600 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 9600 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin9600Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 9600 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin4800Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 4800 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 4800 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin4800Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 4800 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin2400Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 2400 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 2400 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin2400Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 2400 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin1200Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 1200 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 1200 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin1200Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 1200 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Lin1000Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 1000 bit/s.
</summary>
            <returns>
  Bit timing value for the predefined bit rate of 1000 bit/s.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Lin1000Bit">
            <summary>
  Gets the bit timing value for the predefined bit rate of 1000 bit/s.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_MaxBitrate">
            <summary>
  Gets the bit timing value for the predefined highest LIN bitrate.
</summary>
            <returns>
  Bit timing value for the predefined highest LIN bitrate.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.MaxBitrate">
            <summary>
  Gets the bit timing value for the predefined highest LIN bitrate.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_MinBitrate">
            <summary>
  Gets the bit timing value for the predefined lowest LIN bitrate.
</summary>
            <returns>
  Bit timing value for the predefined lowest LIN bitrate.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.MinBitrate">
            <summary>
  Gets the bit timing value for the predefined lowest LIN bitrate.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_AutoRate">
            <summary>
  Gets the bit timing value used for automatic bitrate detection in 
  <c>ILinControl.InitLine</c>.
</summary>
            <returns>
  Bit timing value used for automatic bitrate detection.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.AutoRate">
            <summary>
  Gets the bit timing value used for automatic bitrate detection in 
  <c>ILinControl.InitLine</c>.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Undefined">
            <summary>
  Gets an undefined bit timing value.
</summary>
            <returns>
  Undefined bit timing value.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Undefined">
            <summary>
  Gets an undefined bit timing value.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_Name">
            <summary>
  Gets the name of this bitrate.
</summary>
            <returns>
  The name of this bitrate.
</returns>
            <remarks>
  This property returns either the user defined name of the bit rate,
  if the bit rate was created with a name, or the name of the known
  bit rate. For custom bit rates without a user defined name, the
  property returns the bit timing value as numeric string.
</remarks>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.Name">
            <summary>
  Gets the bit time of this LinBitrate.
</summary>
            <remarks>
  This property returns either the user defined name of the bit rate,
  if the bit rate was created with a name, or the name of the known
  bit rate. For custom bit rates without a user defined name, the
  property returns the bit timing value as numeric string.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinBitrate.get_AsUInt16">
            <summary>
  Gets the 16 bit value of this LinBitrate structure.
</summary>
            <returns>
  The 16 bit value of this LinBitrate structure.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinBitrate.AsUInt16">
            <summary>
  Gets the 16 bit value of this LinBitrate structure.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinBitrate">
            <summary>
  Instances of <c>LinBitrate</c> represent a bit rate for LIN busses.
  The pedefined bitrates are provided as static <c>LinBitrate</c> members 
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.ToString">
            <summary>
  This method returns a String that represents the current object.
</summary>
            <returns>
  A String that represents the current object.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.op_Inequality(Ixxat.Vci3.Bal.Lin.LinMessage,Ixxat.Vci3.Bal.Lin.LinMessage)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.op_Equality(Ixxat.Vci3.Bal.Lin.LinMessage,Ixxat.Vci3.Bal.Lin.LinMessage)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.Clear">
            <summary>
  This method clears the contents of this CAN message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.#cctor">
            <summary>
  Static constructor for initialization of static members
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.Empty">
            <summary>
  Gets an empty LinMessage
</summary>
            <example>
                <code>
    LinMessage message = LinMessage.Empty;
    // Set DLC = 2
    message.DataLength = 2;
    // Initialize data field with 0xFF 0x08
    message[0] = 0xFF;
    message[1] = 0xFF;
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_Data(System.Int32,System.Byte)">
            <summary>
  Sets a single data byte at the specified index within this
  message.
</summary>
            <param name="index">
  Index of the data byte to set
</param>
            <param name="value">
  Value for the data byte
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is out of range [0;<c>DataLength</c>].
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_Data(System.Int32)">
            <summary>
  Gets a single data byte at the specified index from this 
  message.
</summary>
            <param name="index">
  Index of the data byte to get.
</param>
            <returns>
  The data byte at the specified index.
</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is out of range [0;<c>DataLength</c>].
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.Data(System.Int32)">
            <summary>
  Gets or sets a single data byte at the specified index from this
  message. This property represents the indexer property. There is no
  real property with name "Data".
</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is out of range [0;<c>DataLength</c>].
</exception>
            <example>
                <code>
    LinMessage message = new LinMessage();
    // Set DLC = 2
    message.DataLength = 2;
    // Initialize data field with 0xFF 0x08
    message[0] = 0xFF;
    message[1] = 0xFF;
  </code>
            </example>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_IdOnly(System.Boolean)">
            <summary>
  Sets a value indicating if the message should be sent without data.
</summary>
            <param name="value">
  A value indicating if the message should be sent without data.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_IdOnly">
            <summary>
  Gets a value indicating if the message should be sent without data.
</summary>
            <returns>
  A value indicating if the message should be sent without data.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.IdOnly">
            <summary>
  Gets or sets a value indicating if the message should be sent without
  data (only with identifier).
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_SenderOfResponse(System.Boolean)">
            <summary>
  Set a value indicating that the LIN controller itself should
</summary>
            <returns>
  A value indicating that the LIN controller itself transmitted the 
  message.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_SenderOfResponse">
            <summary>
  Gets a value indicating that the LIN controller itself transmitted the 
  message.
</summary>
            <returns>
  A value indicating that the LIN controller itself transmitted the 
  message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.SenderOfResponse">
            <summary>
  Gets a value indicating that the LIN controller itself transmitted the 
  message, i.e. with messages for which the controller has an entry
  in the response table.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_ExtendedCrc(System.Boolean)">
            <summary>
  Sets a value indicating if it is a message with extended
  checksum in accordance with LIN 2.0.
</summary>
            <param name="value">
  A value indicating if it is a message with extended
  checksum in accordance with LIN 2.0.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_ExtendedCrc">
            <summary>
  Gets a value indicating if it is a message with extended
  checksum in accordance with LIN 2.0.
</summary>
            <returns>
  A value indicating if it is a message with extended
  checksum in accordance with LIN 2.0.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.ExtendedCrc">
            <summary>
  Gets or sets a value indicating if it is a message with extended
  checksum in accordance with LIN 2.0.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_PossibleOverrun">
            <summary>
  Gets a value indicating whether this message was the last
  message which could be placed in the receive FIFO, before
  this overflows.
</summary>
            <returns>
  A value indicating whether this message was the last
  message which could be placed in the receive FIFO, before
  this overflows.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.PossibleOverrun">
            <summary>
  Gets a value indicating whether this message was the last
  message which could be placed in the receive FIFO, before
  this overflows.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_DataLength(System.Byte)">
            <summary>
  Sets the data length of this message.
</summary>
            <param name="length">
  The data length value of this message to set.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The data length value to be set is out of range [0;8].
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_DataLength">
            <summary>
  Gets the data length of this message.
</summary>
            <returns>
  The data length of this message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.DataLength">
            <summary>
  Gets or sets the data length of this message.
</summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The data length value to be set is out of range [0;8].
</exception>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_MessageType(Ixxat.Vci3.Bal.Lin.LinMessageType)">
            <summary>
  Sets a value indicating the message type of this message.
</summary>
            <paramref name="messageType">
  The message frame type to set.
</paramref>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_MessageType">
            <summary>
  Gets a value indicating the message type of this message.
</summary>
            <returns>
  A value indicating the message type of this message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.MessageType">
            <summary>
  Gets a value indicating the frame type of this message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_ProtId(System.Byte)">
            <summary>
  Sets the protected identifier of this message.
</summary>
            <param name="protId">
  Protected identifier value to set.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_ProtId">
            <summary>
  Gets the protected identifier of this message.
</summary>
            <returns>
  The CAN protected identifier of this message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.ProtId">
            <summary>
  Gets or sets the protected identifier of this LIN message.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.set_TimeStamp(System.UInt32)">
            <summary>
  Sets the time stamp of this message.
</summary>
            <param name="timestamp">
  Time stamp value to set.
</param>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinMessage.get_TimeStamp">
            <summary>
  Gets the time stamp of this message.
</summary>
            <returns>
  The time stamp of this message.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinMessage.TimeStamp">
            <summary>
  With receive messages, this field contains the relative reception time 
  of the message in ticks. The resolution of a tick can be calculated from 
  the properties <c>ILinSocket.ClockFrequency</c> and 
  <c>ILinSocket.TimeStampCounterDivisor</c> in accordance with the 
  following formula:
  <code>
    Resolution [s] = TimeStampCounterDivisor / ClockFrequency 
  </code></summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinMessage">
            <summary>
  This value class represents a LIN message. LIN messages can be received
  via a LIN monitor (<c>ILinMonitor</c>) and transmitted via a LIN control
  (<c>ILinControl</c>). The LIN data field can be accessed via the 
  indexer property.
</summary>
            <example>
                <code>
    LinMessage message = new LinMessage();
    // Set DLC = 2
    message.DataLength = 2;
    // Initialize data field with 0xFF 0x08
    message[0] = 0xFF;
    message[1] = 0xFF;
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.mngtLINMSG">
            <summary>
  Managed image of native struct LINMSG.
</summary>
            <remarks>
  We have to declare a managed version of native struct LINMSG to prevent
  problems because of the following compiler error:
  error C4368: cannot define 'm_LinMsg' as a member of managed 
               'Ixxat::Vci3::Bal::Lin::LinMessage': mixed types are not 
               supported
</remarks>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.mngtLINMSGINFO">
            <summary>
  Managed image of native struct LINMSGINFO.
</summary>
            <remarks>
  We have to declare a managed version of native struct LINMSGINFO to 
  prevent problems because of the following compiler error C4368.
  (see <c>mngtLINMSG</c>).
</remarks>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinMsgError">
            <summary>
  Enumeration of error information values supplied in first data field byte 
  of an eror frame <c>LinMessage</c> 
  (LinMessage.MessageType == LinMessageType.Error).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgError.Other">
            <summary>
  Other unspecified error
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgError.NoBus">
            <summary>
  No bus activity
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgError.Sync">
            <summary>
  Invalid synchronization field
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgError.SlaveNoResponse">
            <summary>
  Slave does not respond
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgError.Parity">
            <summary>
  Parity error of the identifier
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgError.Crc">
            <summary>
  Checksum error
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgError.Bit">
            <summary>
  Bit error
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinMsgInfoValue">
            <summary>
  Enumeration of information values supplied in first data field byte of
  an info frame <c>LinMessage</c> 
  (LinMessage.MessageType == LinMessageType.Info).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgInfoValue.Reset">
            <summary>
  Reset of LIN controller
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgInfoValue.Stop">
            <summary>
  Stop of LIN controller
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMsgInfoValue.Start">
            <summary>
  Start of LIN controller
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinMessageType">
            <summary>
  Enumeration of values that are used to specify the message type of a 
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMessageType.Sleep">
            <summary>
  Goto Sleep message. The fields <c>TimeStamp</c>, <c>ProtId</c> and 
  <c>DataLength</c> have no significance.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMessageType.TimeOverrun">
            <summary>
  Timer counter overrun. Messages of this type are generated in the event 
  of an overrun of the 32 bit time stamp of LIN messages. The field 
  <c>TimeStamp</c> of the message contains the time of the event 
  (normally 0) and in the field <c>DataLength</c> the number of timer 
  overruns after the last timer overrun message.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMessageType.Wakeup">
            <summary>
  Only for transmit messages. Messages of this type generate a wake-up 
  signal on the bus. The fields <c>TimeStamp</c>, <c>ProtId</c> and 
  <c>DataLength</c> have no significance.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMessageType.Status">
            <summary>
  Status message. 
  This message type is entered in the receive buffers of all activated 
  message monitors when the controller status changes. The property
  <c>ProtId</c> of the message always has the value 0xFF. 
  The time of the event is marked in the property <c>TimeStamp</c> of 
  the message. The property Data[0] (indexer of the message) contains 
  flags defined by <c>CanCtrlStatus</c>. 
  The contents of the other data fields are undefined.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMessageType.Error">
            <summary>
  Error message. 
  This message type is entered in the receive buffers of all activated message 
  monitors when bus errors occur as far as <c>LinOperatingModes.ErrFrame</c> 
  was specified in the parameter OperatingMode when the method 
  <c>ILinControl.InitLine</c> was called. The property <c>ProtId</c> of 
  the message always has the value 0xFF. The time of the event is marked 
  in the property <c>TimeStamp</c> of the message. The property Data[0] 
  (indexer of the message) contains one of the following values:
  <list type="table"><listheader><term>Constant</term><description>Meaning</description></listheader><item><term><c>LinMsgError.Bit</c></term><description>Bit error</description></item><item><term><c>LinMsgError.Crc</c></term><description>Checksum error</description></item><item><term><c>LinMsgError.Parity</c></term><description>Parity error of the identifier</description></item><item><term><c>LinMsgError.SlaveNoResponse</c></term><description>Slave does not respond</description></item><item><term><c>LinMsgError.Sync</c></term><description>Invalid synchronization field</description></item><item><term><c>LinMsgError.NoBus</c></term><description>No bus activity</description></item><item><term><c>LinMsgError.Other</c></term><description>Other unspecified error</description></item></list>
  The property Data[1] (indexer of the message) contains the low value byte 
  of the current status (see <c>LinLineStatus</c>). The content of the other 
  data field bytes is undefined.
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMessageType.Info">
            <summary>
  Information message. 
  This message type is entered in the receive buffers of all activated 
  message monitors with certain events or with changes to the status of 
  the controller. The property <c>Identifier</c> of the message always has the 
  value 0xFF. The property Data[0] (Indexer of the message) contains 
  one of the following values:
  <list type="table"><listheader><term>Constant</term><description>Meaning</description></listheader><item><term><c>LinMsgInfoValue.Start</c></term><description>
         The LIN controller was started. The property <c>TimeStamp</c>  
         contains the relative start time (normally 0).
       </description></item><item><term><c>LinMsgInfoValue.Stop</c></term><description>
         The LIN controller was stopped. The property <c>TimeStamp</c> 
         contains the value 0. 
       </description></item><item><term><c>LinMsgInfoValue.Reset</c></term><description>
          The LIN controller was reset. The property <c>TimeStamp</c>
          contains the value 0.
       </description></item></list></summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinMessageType.Data">
            <summary>
  Normal message. 
  All regular receive messages are of this type. 
  The property <c>LinMessage.ProtId</c> contains the ID of the message, 
  the property <c>LinMessage.TimeStamp</c> the receive time. 
  The data field (accessible via the message's indexer) contains, 
  according to length (see <c>DataLength</c>) the databytes of the message.
. In master mode, messages of this type can also be transmitted. The ID 
  must be entered in the property <c>LinMessage.ProtId</c> and in the data 
  field (accessible via the message's indexer), depending on the length
  (<c>ProtId</c>), the data to be transmitted. 
  The property <c>LinMessage.TimeStamp</c> is set to 0. To transmit
  only the ID without data, property <c>IdOnly</c> is set to true.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinSocket">
            <summary>
  This class implements a LIN socket.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.TimeStampCounterDivisor">
            <summary>
  Gets the divisor factor of the time stamp counter. 
  The time stamp counter provides the time stamp for LIN messages. 
  The frequency of the time stamp counter is calculated from the frequency 
  of the primary timer (<c>ClockFrequency</c>) divided by the value 
  specified here.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.ClockFrequency">
            <summary>
  Gets the frequency to the primary timer in Hz.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.SupportsBusLoadComputation">
            <summary>
  Gets a value indicating if the LIN socket supports bus load computation.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.SupportsErrorFrames">
            <summary>
  Gets a value indicating if the LIN socket supports error frame reception.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.SupportsAutorate">
            <summary>
  Gets a value indicating if the LIN socket supports automatic baudrate
  detection.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.SupportsMasterMode">
            <summary>
  Gets a value indicating if the LIN socket supports LIN master mode.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.Features">
            <summary>
  Gets a flag field indicating the features supported by the LIN controller.
</summary>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.ILinSocket.LineStatus">
            <summary>
  Gets the current status of the LIN line.
</summary>
            <exception cref="T:Ixxat.Vci3.VciException">
  Getting LIN line status failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.ILinSocket">
            <summary>
                <c>ILinSocket</c> provides the properties and capabilities of a
  LIN controller.
  When no longer needed the LIN socket object has to be disposed using the 
  IDisposable interface. 
  A LIN socket object can be got via method <c>IBalObject.OpenSocket()</c>.
  Additionally <c>ILinSocket</c> is the base interface for several other
  LIN bus specific socket interfaces like <c>ILinControl</c> and 
  <c>ILinMonitor</c>.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IBalObject bal = ...
  // Open first LIN socket
  ILinSocket socket = bal.OpenSocket(0, typeof(ILinSocket)) as ILinSocket;
  
  // Use socket
  // ...
  
  // Dispose socket an BAL
  socket.Dispose();
  bal.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinFeatures">
            <summary>
  Enumeration of flag values that are used to signalize the features 
  supported by a LIN controller (see <c>ILinSocket</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinFeatures.Busload">
            <summary>
  Indicates if bus load measurement is supported
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinFeatures.ErrFrame">
            <summary>
  Indicates if reception of error frames is supported
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinFeatures.Autorate">
            <summary>
  Indicates if automatic bitrate detection is supported
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinFeatures.Master">
            <summary>
  Indicates if the LIN master mode is supported
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.BalObject">
            <summary>
  This class implements the BAL object.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.IBalObject.OpenSocket(System.Byte,System.Type)">
            <summary>
  This method opens the specified bus socket.
</summary>
            <param name="portNumber">
  Number of the bus socket to open. This parameter must be within the 
  range of 0 to <c>Resources.Count</c> - 1.
</param>
            <param name="socketType">
  Type of the bus socket to open. The supported socket types
  are depending on the <c>BusType</c> of the BAL resource specified by the 
  <c>portNumber</c> parameter.
  I.e. for a CAN bus socket the following <c>socketTypes</c> are supported:
    ICanSocket, 
    ICanControl, 
    ICanChannel, 
    ICanScheduler.
  It's possible have several socketType open at the same time (i.e.
  ICanControl and ICanChannel).
</param>
            <returns>
  If the method succeeds it returns the opened bus socket object as 
  <c>IBalResource</c> reference. This reference can be casted to
  the type specified by parameter <paramref name="socketType" />.
  If the method fails it returns a null reference (Nothing in
  VisualBasic).
  When no longer needed the returned socket object has to be disposed using 
  the IDisposable interface. 
</returns>
            <remarks>
  The type of the bus socket is implicitly specified by the
  <c>portNumber</c> parameter (see <c>IBalResource.BusType</c> property).

  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <exception cref="T:Ixxat.Vci3.VciException">
  Opening socket failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified port number is out of range.
</exception>
            <exception cref="T:System.NotImplementedException">
  There's no implementation for the specified <paramref name="socketType" />.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.IBalObject.Resources">
            <summary>
  Gets a <c>BalResourceCollection</c> that can be used to iterate through
  the available BAL resources or to directly access such one via a
  collection index.
</summary>
            <returns>
  A reference to the collection of BAL resources.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.Bal.IBalObject.FirmwareVersion">
            <summary>
  Gets the firmware version.
</summary>
            <returns>
  The firmware version.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.IBalObject">
            <summary>
  This interface represents a BAL (Bus Access Layer) object.
  When no longer needed the BAL object has to be disposed using the 
  IDisposable interface. 
  Get the BAL object of a device by using method 
  <c>IVciDevice.OpenBusAccessLayer()</c>.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDevice device = ...
  IBalObject bal = device.OpenBusAccessLayer();
  // Use bal here
  // ...
  // Dispose object to release native resources
  bal.Dispose();
  device.Dispose();
  </code>
            </example>
        </member>
        <member name="P:Ixxat.Vci3.Bal.BalResourceCollection.Item(System.Int32)">
            <summary>
  Get's the BAL socket identified by the specified collection index.
</summary>
            <param name="index">
  Index of the requested BAL socket within this collection of BAL 
  sockets.
</param>
            <exception cref="T:System.ArgumentOutOfRangeException">
  The specified index is not a valid index in the list.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.Bal.BalResourceCollection">
            <summary>
  This class implements the BAL resource collection. It can be used
  to iterate through the available BAL resources or to directly access
  one via it's collection index.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.op_Inequality(Ixxat.Vci3.Bal.BalResource,Ixxat.Vci3.Bal.BalResource)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.BalResource.op_Equality(Ixxat.Vci3.Bal.BalResource,Ixxat.Vci3.Bal.BalResource)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Value 1.
</pararm>
            <pararm name="value2">
  Value 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="T:Ixxat.Vci3.Bal.BalResource">
            <summary>
  This class implements a BAL resource descriptor object.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.Bal.IBalResource.BusName">
            <summary>
  Gets the name of the bus.
</summary>
            <returns>
  If succeeded the name of the bus.
  If failed a null reference (Nothing in Visual Basic).
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.IBalResource.BusType">
            <summary>
  Gets the bus type of the BAL bus socket.
</summary>
            <returns>
  The bus type of the BAL bus socket.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.IBalResource.BusPort">
            <summary>
  Gets the port number of the BAL bus socket.
</summary>
            <returns>
  The port number of the BAL bus socket.
</returns>
        </member>
        <member name="T:Ixxat.Vci3.Bal.IBalResource">
            <summary>
                <c>IBalResource</c> is used in two manners: On one hand it represents the 
  physical existance of field bus controlles via property 
  <c>IBalObject.Resources</c>. 
  On the other hand it's the base interface for several functional socket 
  interfaces that can be opened via method <c>IBalObject.OpenSocket</c>.
  When no longer needed the BAL object has to be disposed using the 
  IDisposable interface. 
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.GetHashCode">
            <summary>
  Serves as a hash function for a particular type. GetHashCode is suitable 
  for use in hashing algorithms and data structures like a hash table.
</summary>
            <returns>
  A hash code for the current Object. 
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.Equals(System.Object)">
            <summary>
  Determines whether the specified Object is equal to the current Object.
</summary>
            <pararm name="obj">
  The Object to compare with the current Object.
</pararm>
            <returns>
  true if the specified Object is equal to the current Object; 
  otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.op_Inequality(Ixxat.Vci3.Bal.Lin.LinLineStatus,Ixxat.Vci3.Bal.Lin.LinLineStatus)">
            <summary>
  Determines whether the specified Object instances are not equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 not equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.op_Equality(Ixxat.Vci3.Bal.Lin.LinLineStatus,Ixxat.Vci3.Bal.Lin.LinLineStatus)">
            <summary>
  Determines whether the specified Object instances are equal.
</summary>
            <pararm name="value1">
  Status 1.
</pararm>
            <pararm name="value2">
  Status 2.
</pararm>
            <returns>
  true if value1 equals value2; otherwise, false.
</returns>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.get_IsInInitMode">
            <summary>
  Gets a value indicating whether the LIN controller is currently in init 
  mode.
</summary>
            <returns>
  true if the LIN controller is in init mode, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinLineStatus.IsInInitMode">
            <summary>
  Gets a value indicating whether the LIN controller is currently in init 
  mode.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.get_HasDataOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the LIN controllers
  internal message buffer.
</summary>
            <returns>
  true if a data overrun has occured, otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinLineStatus.HasDataOverrun">
            <summary>
  Gets a value indicating if a message was lost because there was
  not enough free space for the message in the LIN controllers
  internal message buffer.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.get_ControllerStatus">
            <summary>
  Gets the current LIN controller status.
</summary>
            <returns>
  Current LIN controller status.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinLineStatus.ControllerStatus">
            <summary>
  Gets the current LIN controller status.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.get_IsErrModeEnabled">
            <summary>
  Gets a value indicating if the reception of error frames is currently 
  enabled.
</summary>
            <returns>
  true if the reception of error frames is currently enabled,
  otherwise false.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinLineStatus.IsErrModeEnabled">
            <summary>
  Gets a value indicating if the reception of error frames is currently 
  enabled.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.get_IsInMasterMode">
            <summary>
  Gets a value indicating whether the LIN controller is currently
  operating in master mode.
</summary>
            <returns>
  true if the LIN controller is currently operating in master 
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinLineStatus.IsInMasterMode">
            <summary>
  Gets a value indicating whether the LIN controller is currently
  operating in master mode.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.get_IsInSlaveMode">
            <summary>
  Gets a value indicating whether the LIN controller is currently
  operating in slave mode.
</summary>
            <returns>
  true if the LIN controller is currently operating in slave 
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinLineStatus.IsInSlaveMode">
            <summary>
  Gets a value indicating whether the LIN controller is currently
  operating in slave mode.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.Bal.Lin.LinLineStatus.get_OperatingMode">
            <summary>
  Gets the current operating mode of the LIN controller.
</summary>
            <returns>
  The current operating mode of the LIN controller.
</returns>
        </member>
        <member name="P:Ixxat.Vci3.Bal.Lin.LinLineStatus.OperatingMode">
            <summary>
  Gets the current operating mode of the LIN controller.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinLineStatus">
            <summary>
                <c>LinLineStatus</c> is used to signalize the status of a LIN 
  controller. See interface <c>ILinSocket</c>.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.mngtLINLINESTATUS">
            <summary>
  Managed image of native struct LINLINESTATUS.
</summary>
            <remarks>
  We have to declare a managed version of native struct LINLINESTATUS to 
  prevent problems because of the following compiler error:
  error C4368: cannot define 'm_sLineStatus' as a member of managed 
               'Ixxat::Vci3::Bal::Lin::LinLineStatus': mixed types are not 
               supported
</remarks>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinCtrlStatus">
            <summary>
  Enumeration of flag values that are used to signalize the status mode of
  a LIN controller (see <c>LinLineStatus</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinCtrlStatus.InInit">
            <summary>
  Init mode active
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinCtrlStatus.Overrun">
            <summary>
  Data overrun occurred
</summary>
        </member>
        <member name="T:Ixxat.Vci3.Bal.Lin.LinOperatingModes">
            <summary>
  Enumeration of flag values that are used to specify or signalize the 
  operating mode of a LIN controller (see <c>LinLineStatus</c>).
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinOperatingModes.Errors">
            <summary>
  Enables reception of error frames
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinOperatingModes.Master">
            <summary>
  Indicates the LIN master mode
</summary>
        </member>
        <member name="F:Ixxat.Vci3.Bal.Lin.LinOperatingModes.Slave">
            <summary>
  Indicates the LIN slave mode
</summary>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverManager.GetDriverList">
            <summary>
  Gets the list of VCI driver objects represeted by a 
  <c>IVciDriverList</c> interface.
</summary>
            <returns>
  The list of VCI driver objects represeted by a <c>IVciDriverList</c>
  interface.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if creation of the driver list failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverManager.Dispose">
            <summary>
  Destructor for VCI driver manager objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.VciDriverManager.#ctor">
            <summary>
  Constructor for VCI driver manager objects.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.VciDriverManager">
            <summary>
  The VCI driver manager object manages the list of VCI driver objects.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.IVciDriverManager.GetDriverList">
            <summary>
  Gets the list of VCI driver objects represeted by a 
  <c>IVciDriverList</c> interface.
</summary>
            <returns>
  The list of VCI driver objects represeted by a <c>IVciDriverList</c>
  interface.
</returns>
            <exception cref="T:Ixxat.Vci3.VciException">
  Thrown if creation of the driver list failed.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.IVciDriverManager">
            <summary>
  The VCI driver manager manages the list of VCI driver objects.
  Use the static <c>VciServer</c> class to get a VCI driver manager
  object.
  When no longer needed the VCI driver manager object has to be disposed 
  using the IDisposable interface. 
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDriverManager driverManager = VciServer.GetDriverManager();
  // Use driverManager here
  // ...
  // Dispose object to release native resources
  driverManager.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.VciDriverEnumerator">
            <summary>
  This class is used to enumerate the a list of VCI driver objects.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.VciDriverList">
            <summary>
  This class represents the list of installed VCI drivers.
  To observe changes within this list use the <c>AssignEvent</c> methods 
  to register an event. This event is set to the signaled state whenever 
  the contents of the driver list changes.
</summary>
        </member>
        <member name="M:Ixxat.Vci3.IVciDriverList.AssignEvent(System.Threading.ManualResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the driver list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the driver 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="M:Ixxat.Vci3.IVciDriverList.AssignEvent(System.Threading.AutoResetEvent)">
            <summary>
  This method assigns an event object to the list. The event is
  set to the signaled state whenever the contents of the driver list
  changes.
</summary>
            <param name="changeEvent">
  The event object which is to be set whenever the contents of the driver 
  list changes.
</param>
            <exception cref="T:Ixxat.Vci3.VciException">
  Assigning the event failed.
</exception>
            <exception cref="T:System.ArgumentNullException">
  Parameter changeEvent was a null reference.
</exception>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.IVciDriverList">
            <summary>
  This interface represents the list of installed VCI drivers.
  When no longer needed the VCI driver list object has to be disposed 
  using the IDisposable interface. 
  To observe changes within this list use the <c>AssignEvent</c> methods 
  to register an event. This event is set to the signaled state whenever 
  the contents of the driver list changes.
  Use <c>GetEnumerator</c> to enumerate the list of VCI driver objects
  whereas each VCI driver object can be accessed by it's <c>IVciDriver</c> 
  interface.
  The enumerator object returned by <c>GetEnumerator</c> also has to be
  disposed using the IDisposable interface. 
  Excplicitly disposing the enumerator object can be omitted when using 
  the C# foreach statement. foreach implicitly disposes the enumerator.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDriverManager driverManager = VciServer.GetDriverManager();
  IVciDriverList drivers = driverManager.GetDriverList();
  foreach(IVciDriver driver in drivers)
  {
    // Use driver here
    // ...
    // Dispose object to release native resources
    driver.Dispose();
  }
  drivers.Dispose();
  driverManager.Dispose();
  </code>
            </example>
        </member>
        <member name="T:Ixxat.Vci3.VciTimeoutException">
            <summary>
  VCI timeout exception class.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.VciException">
            <summary>
  This class implements the basic VCI exception object.
</summary>
        </member>
        <member name="T:Ixxat.Vci3.VciDriver">
            <summary>
  This class implements a VCI driver object.
</summary>
        </member>
        <member name="P:Ixxat.Vci3.IVciDriver.DriverVersion">
            <summary>
  Gets the version of the VCI driver.
</summary>
            <returns>
  The version of the VCI driver.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDriver.DriverClass">
            <summary>
  Gets the class id of the VCI driver object.
</summary>
            <returns>
  Unique VCI driver class id.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="P:Ixxat.Vci3.IVciDriver.VciObjectId">
            <summary>
  Gets the unique VCI object id of the driver.
</summary>
            <returns>
  Unique VCI object id of the driver.
</returns>
            <exception cref="T:System.ObjectDisposedException">
  Object is already disposed.
</exception>
        </member>
        <member name="T:Ixxat.Vci3.IVciDriver">
            <summary>
  This interface represents a VCI driver object.
  When no longer needed the VCI driver object has to be disposed using 
  the IDisposable interface. 
  Get a VCI driver object via the driver list of <c>IVciDriverManager</c>.
</summary>
            <remarks>
  The VCI interfaces provide access to native driver resources. Because the 
  .NET garbage collector is only designed to manage memory, but not 
  native OS and driver resources the caller is responsible to release this 
  resources via calling <c>IDisposable.Dispose()</c> when the object is no 
  longer needed. Otherwise native memory and resource leaks may occure.
</remarks>
            <example>
                <code>
  IVciDriverManager driverManager = VciServer.GetDriverManager();
  IVciDriverList drivers = driverManager.GetDriverList();
  foreach(IVciDriver driver in drivers)
  {
    // Use driver here
    // ...
    // Dispose object to release native resources
    driver.Dispose();
  }
  drivers.Dispose();
  driverManager.Dispose();
  </code>
            </example>
        </member>
    </members>
</doc>